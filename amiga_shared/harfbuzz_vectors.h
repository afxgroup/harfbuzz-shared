/*
** This file was machine generated by idltool.py 54.8.
** Do not edit.
*/

#include <exec/types.h>
#include <exec/exec.h>
#include <exec/interfaces.h>
#include <cairo.h>
#include <freetype/freetype.h>
#include <hb.h>
#include <hb-aat.h>
#include <hb-cairo.h>
#include <hb-subset.h>
#include <hb-subset-repacker.h>


/* forward declaration */
struct HarfbuzzIFace;

extern uint32 VARARGS68K _impl_Obtain(struct HarfbuzzIFace *);
extern uint32 VARARGS68K _impl_Release(struct HarfbuzzIFace *);
extern unsigned int VARARGS68K _impl_hb_aat_layout_get_feature_types(struct HarfbuzzIFace *, hb_face_t * face, unsigned int start_offset, unsigned int * feature_count, hb_aat_layout_feature_type_t * features);
extern hb_ot_name_id_t VARARGS68K _impl_hb_aat_layout_feature_type_get_name_id(struct HarfbuzzIFace *, hb_face_t * face, hb_aat_layout_feature_type_t feature_type);
extern unsigned int VARARGS68K _impl_hb_aat_layout_feature_type_get_selector_infos(struct HarfbuzzIFace *, hb_face_t * face, hb_aat_layout_feature_type_t feature_type, unsigned int start_offset, unsigned int * selector_count, hb_aat_layout_feature_selector_info_t * selectors, unsigned int * default_index);
extern hb_bool_t VARARGS68K _impl_hb_aat_layout_has_substitution(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_aat_layout_has_positioning(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_aat_layout_has_tracking(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_blob_t * VARARGS68K _impl_hb_blob_create(struct HarfbuzzIFace *, const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy);
extern hb_blob_t * VARARGS68K _impl_hb_blob_create_or_fail(struct HarfbuzzIFace *, const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy);
extern hb_blob_t * VARARGS68K _impl_hb_blob_create_from_file(struct HarfbuzzIFace *, const char * file_name);
extern hb_blob_t * VARARGS68K _impl_hb_blob_create_from_file_or_fail(struct HarfbuzzIFace *, const char * file_name);
extern hb_blob_t * VARARGS68K _impl_hb_blob_create_sub_blob(struct HarfbuzzIFace *, hb_blob_t * parent, unsigned int offset, unsigned int length);
extern hb_blob_t * VARARGS68K _impl_hb_blob_copy_writable_or_fail(struct HarfbuzzIFace *, hb_blob_t * blob);
extern hb_blob_t * VARARGS68K _impl_hb_blob_get_empty(struct HarfbuzzIFace *);
extern hb_blob_t * VARARGS68K _impl_hb_blob_reference(struct HarfbuzzIFace *, hb_blob_t * blob);
extern void VARARGS68K _impl_hb_blob_destroy(struct HarfbuzzIFace *, hb_blob_t * blob);
extern hb_bool_t VARARGS68K _impl_hb_blob_set_user_data(struct HarfbuzzIFace *, hb_blob_t * blob, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_blob_get_user_data(struct HarfbuzzIFace *, const hb_blob_t * blob, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_blob_make_immutable(struct HarfbuzzIFace *, hb_blob_t * blob);
extern hb_bool_t VARARGS68K _impl_hb_blob_is_immutable(struct HarfbuzzIFace *, hb_blob_t * blob);
extern unsigned int VARARGS68K _impl_hb_blob_get_length(struct HarfbuzzIFace *, hb_blob_t * blob);
extern const char * VARARGS68K _impl_hb_blob_get_data(struct HarfbuzzIFace *, hb_blob_t * blob, unsigned int * length);
extern char * VARARGS68K _impl_hb_blob_get_data_writable(struct HarfbuzzIFace *, hb_blob_t * blob, unsigned int * length);
extern hb_glyph_flags_t VARARGS68K _impl_hb_glyph_info_get_glyph_flags(struct HarfbuzzIFace *, const hb_glyph_info_t * info);
extern hb_bool_t VARARGS68K _impl_hb_segment_properties_equal(struct HarfbuzzIFace *, const hb_segment_properties_t * a, const hb_segment_properties_t * b);
extern unsigned int VARARGS68K _impl_hb_segment_properties_hash(struct HarfbuzzIFace *, const hb_segment_properties_t * p);
extern void VARARGS68K _impl_hb_segment_properties_overlay(struct HarfbuzzIFace *, hb_segment_properties_t * p, const hb_segment_properties_t * src);
extern hb_buffer_t * VARARGS68K _impl_hb_buffer_create(struct HarfbuzzIFace *);
extern hb_buffer_t * VARARGS68K _impl_hb_buffer_create_similar(struct HarfbuzzIFace *, const hb_buffer_t * src);
extern void VARARGS68K _impl_hb_buffer_reset(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern hb_buffer_t * VARARGS68K _impl_hb_buffer_get_empty(struct HarfbuzzIFace *);
extern hb_buffer_t * VARARGS68K _impl_hb_buffer_reference(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_destroy(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern hb_bool_t VARARGS68K _impl_hb_buffer_set_user_data(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_buffer_get_user_data(struct HarfbuzzIFace *, const hb_buffer_t * buffer, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_buffer_set_content_type(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_buffer_content_type_t content_type);
extern hb_buffer_content_type_t VARARGS68K _impl_hb_buffer_get_content_type(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_unicode_funcs(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_unicode_funcs_t * unicode_funcs);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_buffer_get_unicode_funcs(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_direction(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_direction_t direction);
extern hb_direction_t VARARGS68K _impl_hb_buffer_get_direction(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_script(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_script_t script);
extern hb_script_t VARARGS68K _impl_hb_buffer_get_script(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_language(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_language_t language);
extern hb_language_t VARARGS68K _impl_hb_buffer_get_language(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_segment_properties(struct HarfbuzzIFace *, hb_buffer_t * buffer, const hb_segment_properties_t * props);
extern void VARARGS68K _impl_hb_buffer_get_segment_properties(struct HarfbuzzIFace *, const hb_buffer_t * buffer, hb_segment_properties_t * props);
extern void VARARGS68K _impl_hb_buffer_guess_segment_properties(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_flags(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_buffer_flags_t flags);
extern hb_buffer_flags_t VARARGS68K _impl_hb_buffer_get_flags(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_cluster_level(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_buffer_cluster_level_t cluster_level);
extern hb_buffer_cluster_level_t VARARGS68K _impl_hb_buffer_get_cluster_level(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_replacement_codepoint(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_codepoint_t replacement);
extern hb_codepoint_t VARARGS68K _impl_hb_buffer_get_replacement_codepoint(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_invisible_glyph(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_codepoint_t invisible);
extern hb_codepoint_t VARARGS68K _impl_hb_buffer_get_invisible_glyph(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_not_found_glyph(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_codepoint_t not_found);
extern hb_codepoint_t VARARGS68K _impl_hb_buffer_get_not_found_glyph(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_set_random_state(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned state);
extern unsigned VARARGS68K _impl_hb_buffer_get_random_state(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_clear_contents(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern hb_bool_t VARARGS68K _impl_hb_buffer_pre_allocate(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int size);
extern hb_bool_t VARARGS68K _impl_hb_buffer_allocation_successful(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_reverse(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_reverse_range(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int start, unsigned int end);
extern void VARARGS68K _impl_hb_buffer_reverse_clusters(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_add(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_codepoint_t codepoint, unsigned int cluster);
extern void VARARGS68K _impl_hb_buffer_add_utf8(struct HarfbuzzIFace *, hb_buffer_t * buffer, const char * text, int text_length, unsigned int item_offset, int item_length);
extern void VARARGS68K _impl_hb_buffer_add_utf16(struct HarfbuzzIFace *, hb_buffer_t * buffer, const uint16_t * text, int text_length, unsigned int item_offset, int item_length);
extern void VARARGS68K _impl_hb_buffer_add_utf32(struct HarfbuzzIFace *, hb_buffer_t * buffer, const uint32_t * text, int text_length, unsigned int item_offset, int item_length);
extern void VARARGS68K _impl_hb_buffer_add_latin1(struct HarfbuzzIFace *, hb_buffer_t * buffer, const uint8_t * text, int text_length, unsigned int item_offset, int item_length);
extern void VARARGS68K _impl_hb_buffer_add_codepoints(struct HarfbuzzIFace *, hb_buffer_t * buffer, const hb_codepoint_t * text, int text_length, unsigned int item_offset, int item_length);
extern void VARARGS68K _impl_hb_buffer_append(struct HarfbuzzIFace *, hb_buffer_t * buffer, const hb_buffer_t * source, unsigned int start, unsigned int end);
extern hb_bool_t VARARGS68K _impl_hb_buffer_set_length(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int length);
extern unsigned int VARARGS68K _impl_hb_buffer_get_length(struct HarfbuzzIFace *, const hb_buffer_t * buffer);
extern hb_glyph_info_t * VARARGS68K _impl_hb_buffer_get_glyph_infos(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int * length);
extern hb_glyph_position_t * VARARGS68K _impl_hb_buffer_get_glyph_positions(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int * length);
extern hb_bool_t VARARGS68K _impl_hb_buffer_has_positions(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern void VARARGS68K _impl_hb_buffer_normalize_glyphs(struct HarfbuzzIFace *, hb_buffer_t * buffer);
extern hb_buffer_serialize_format_t VARARGS68K _impl_hb_buffer_serialize_format_from_string(struct HarfbuzzIFace *, const char * str, int len);
extern const char * VARARGS68K _impl_hb_buffer_serialize_format_to_string(struct HarfbuzzIFace *, hb_buffer_serialize_format_t format);
extern const char ** VARARGS68K _impl_hb_buffer_serialize_list_formats(struct HarfbuzzIFace *);
extern unsigned int VARARGS68K _impl_hb_buffer_serialize_glyphs(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_font_t * font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
extern unsigned int VARARGS68K _impl_hb_buffer_serialize_unicode(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
extern unsigned int VARARGS68K _impl_hb_buffer_serialize(struct HarfbuzzIFace *, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_font_t * font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
extern hb_bool_t VARARGS68K _impl_hb_buffer_deserialize_glyphs(struct HarfbuzzIFace *, hb_buffer_t * buffer, const char * buf, int buf_len, const char * *end_ptr, hb_font_t * font, hb_buffer_serialize_format_t format);
extern hb_bool_t VARARGS68K _impl_hb_buffer_deserialize_unicode(struct HarfbuzzIFace *, hb_buffer_t * buffer, const char * buf, int buf_len, const char * *end_ptr, hb_buffer_serialize_format_t format);
extern hb_buffer_diff_flags_t VARARGS68K _impl_hb_buffer_diff(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_buffer_t * reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz);
extern void VARARGS68K _impl_hb_buffer_set_message_func(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_buffer_message_func_t func, void * user_data, hb_destroy_func_t destroy);
extern cairo_font_face_t * VARARGS68K _impl_hb_cairo_font_face_create_for_font(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_font_t * VARARGS68K _impl_hb_cairo_font_face_get_font(struct HarfbuzzIFace *, cairo_font_face_t * font_face);
extern cairo_font_face_t * VARARGS68K _impl_hb_cairo_font_face_create_for_face(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_face_t * VARARGS68K _impl_hb_cairo_font_face_get_face(struct HarfbuzzIFace *, cairo_font_face_t * font_face);
extern void VARARGS68K _impl_hb_cairo_font_face_set_font_init_func(struct HarfbuzzIFace *, cairo_font_face_t * font_face, hb_cairo_font_init_func_t func, void * user_data, hb_destroy_func_t destroy);
extern hb_font_t * VARARGS68K _impl_hb_cairo_scaled_font_get_font(struct HarfbuzzIFace *, cairo_scaled_font_t * scaled_font);
extern void VARARGS68K _impl_hb_cairo_font_face_set_scale_factor(struct HarfbuzzIFace *, cairo_font_face_t * font_face, unsigned int scale_factor);
extern unsigned int VARARGS68K _impl_hb_cairo_font_face_get_scale_factor(struct HarfbuzzIFace *, cairo_font_face_t * font_face);
extern void VARARGS68K _impl_hb_cairo_glyphs_from_buffer(struct HarfbuzzIFace *, hb_buffer_t * buffer, hb_bool_t utf8_clusters, double x_scale_factor, double y_scale_factor, double x, double y, const char * utf8, int utf8_len, cairo_glyph_t * *glyphs, unsigned int * num_glyphs, cairo_text_cluster_t * *clusters, unsigned int * num_clusters, cairo_text_cluster_flags_t * cluster_flags);
extern hb_tag_t VARARGS68K _impl_hb_tag_from_string(struct HarfbuzzIFace *, const char * str, int len);
extern void VARARGS68K _impl_hb_tag_to_string(struct HarfbuzzIFace *, hb_tag_t tag, char * buf);
extern hb_direction_t VARARGS68K _impl_hb_direction_from_string(struct HarfbuzzIFace *, const char * str, int len);
extern const char * VARARGS68K _impl_hb_direction_to_string(struct HarfbuzzIFace *, hb_direction_t direction);
extern hb_language_t VARARGS68K _impl_hb_language_from_string(struct HarfbuzzIFace *, const char * str, int len);
extern const char * VARARGS68K _impl_hb_language_to_string(struct HarfbuzzIFace *, hb_language_t language);
extern hb_language_t VARARGS68K _impl_hb_language_get_default(struct HarfbuzzIFace *);
extern hb_bool_t VARARGS68K _impl_hb_language_matches(struct HarfbuzzIFace *, hb_language_t language, hb_language_t specific);
extern hb_script_t VARARGS68K _impl_hb_script_from_iso15924_tag(struct HarfbuzzIFace *, hb_tag_t tag);
extern hb_script_t VARARGS68K _impl_hb_script_from_string(struct HarfbuzzIFace *, const char * str, int len);
extern hb_tag_t VARARGS68K _impl_hb_script_to_iso15924_tag(struct HarfbuzzIFace *, hb_script_t script);
extern hb_direction_t VARARGS68K _impl_hb_script_get_horizontal_direction(struct HarfbuzzIFace *, hb_script_t script);
extern hb_bool_t VARARGS68K _impl_hb_feature_from_string(struct HarfbuzzIFace *, const char * str, int len, hb_feature_t * feature);
extern void VARARGS68K _impl_hb_feature_to_string(struct HarfbuzzIFace *, hb_feature_t * feature, char * buf, unsigned int size);
extern hb_bool_t VARARGS68K _impl_hb_variation_from_string(struct HarfbuzzIFace *, const char * str, int len, hb_variation_t * variation);
extern void VARARGS68K _impl_hb_variation_to_string(struct HarfbuzzIFace *, hb_variation_t * variation, char * buf, unsigned int size);
extern uint8_t VARARGS68K _impl_hb_color_get_alpha(struct HarfbuzzIFace *, hb_color_t color);
extern uint8_t VARARGS68K _impl_hb_color_get_red(struct HarfbuzzIFace *, hb_color_t color);
extern uint8_t VARARGS68K _impl_hb_color_get_green(struct HarfbuzzIFace *, hb_color_t color);
extern uint8_t VARARGS68K _impl_hb_color_get_blue(struct HarfbuzzIFace *, hb_color_t color);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern HB_DEPRECATED void VARARGS68K _impl_hb_unicode_funcs_set_eastasian_width_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_eastasian_width_func_t func, void * user_data, hb_destroy_func_t destroy);
extern HB_DEPRECATED unsigned int VARARGS68K _impl_hb_unicode_eastasian_width(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
extern HB_DEPRECATED void VARARGS68K _impl_hb_unicode_funcs_set_decompose_compatibility_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_decompose_compatibility_func_t func, void * user_data, hb_destroy_func_t destroy);
extern HB_DEPRECATED unsigned int VARARGS68K _impl_hb_unicode_decompose_compatibility(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t u, hb_codepoint_t * decomposed);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_v_kerning_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_kerning_func_t func, void * user_data, hb_destroy_func_t destroy);
extern hb_position_t VARARGS68K _impl_hb_font_get_glyph_v_kerning(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_shape_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_shape_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_get_glyph_shape(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_draw_funcs_t * dfuncs, void * draw_data);
extern void VARARGS68K _impl_hb_draw_funcs_set_move_to_func(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_draw_move_to_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_draw_funcs_set_line_to_func(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_draw_line_to_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_draw_funcs_set_quadratic_to_func(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_draw_quadratic_to_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_draw_funcs_set_cubic_to_func(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_draw_cubic_to_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_draw_funcs_set_close_path_func(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_draw_close_path_func_t func, void * user_data, hb_destroy_func_t destroy);
extern hb_draw_funcs_t * VARARGS68K _impl_hb_draw_funcs_create(struct HarfbuzzIFace *);
extern hb_draw_funcs_t * VARARGS68K _impl_hb_draw_funcs_get_empty(struct HarfbuzzIFace *);
extern hb_draw_funcs_t * VARARGS68K _impl_hb_draw_funcs_reference(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs);
extern void VARARGS68K _impl_hb_draw_funcs_destroy(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs);
extern hb_bool_t VARARGS68K _impl_hb_draw_funcs_set_user_data(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_draw_funcs_get_user_data(struct HarfbuzzIFace *, const hb_draw_funcs_t * dfuncs, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_draw_funcs_make_immutable(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs);
extern hb_bool_t VARARGS68K _impl_hb_draw_funcs_is_immutable(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs);
extern void VARARGS68K _impl_hb_draw_move_to(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float to_x, float to_y);
extern void VARARGS68K _impl_hb_draw_line_to(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float to_x, float to_y);
extern void VARARGS68K _impl_hb_draw_quadratic_to(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float control_x, float control_y, float to_x, float to_y);
extern void VARARGS68K _impl_hb_draw_cubic_to(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y);
extern void VARARGS68K _impl_hb_draw_close_path(struct HarfbuzzIFace *, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st);
extern unsigned int VARARGS68K _impl_hb_face_count(struct HarfbuzzIFace *, hb_blob_t * blob);
extern hb_face_t * VARARGS68K _impl_hb_face_create(struct HarfbuzzIFace *, hb_blob_t * blob, unsigned int index);
extern hb_face_t * VARARGS68K _impl_hb_face_create_for_tables(struct HarfbuzzIFace *, hb_reference_table_func_t reference_table_func, void * user_data, hb_destroy_func_t destroy);
extern hb_face_t * VARARGS68K _impl_hb_face_get_empty(struct HarfbuzzIFace *);
extern hb_face_t * VARARGS68K _impl_hb_face_reference(struct HarfbuzzIFace *, hb_face_t * face);
extern void VARARGS68K _impl_hb_face_destroy(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_face_set_user_data(struct HarfbuzzIFace *, hb_face_t * face, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_face_get_user_data(struct HarfbuzzIFace *, const hb_face_t * face, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_face_make_immutable(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_face_is_immutable(struct HarfbuzzIFace *, const hb_face_t * face);
extern hb_blob_t * VARARGS68K _impl_hb_face_reference_table(struct HarfbuzzIFace *, const hb_face_t * face, hb_tag_t tag);
extern hb_blob_t * VARARGS68K _impl_hb_face_reference_blob(struct HarfbuzzIFace *, hb_face_t * face);
extern void VARARGS68K _impl_hb_face_set_index(struct HarfbuzzIFace *, hb_face_t * face, unsigned int index);
extern unsigned int VARARGS68K _impl_hb_face_get_index(struct HarfbuzzIFace *, const hb_face_t * face);
extern void VARARGS68K _impl_hb_face_set_upem(struct HarfbuzzIFace *, hb_face_t * face, unsigned int upem);
extern unsigned int VARARGS68K _impl_hb_face_get_upem(struct HarfbuzzIFace *, const hb_face_t * face);
extern void VARARGS68K _impl_hb_face_set_glyph_count(struct HarfbuzzIFace *, hb_face_t * face, unsigned int glyph_count);
extern unsigned int VARARGS68K _impl_hb_face_get_glyph_count(struct HarfbuzzIFace *, const hb_face_t * face);
extern unsigned int VARARGS68K _impl_hb_face_get_table_tags(struct HarfbuzzIFace *, const hb_face_t * face, unsigned int start_offset, unsigned int * table_count, hb_tag_t * table_tags);
extern void VARARGS68K _impl_hb_face_collect_unicodes(struct HarfbuzzIFace *, hb_face_t * face, hb_set_t * out);
extern void VARARGS68K _impl_hb_face_collect_nominal_glyph_mapping(struct HarfbuzzIFace *, hb_face_t * face, hb_map_t * mapping, hb_set_t * unicodes);
extern void VARARGS68K _impl_hb_face_collect_variation_selectors(struct HarfbuzzIFace *, hb_face_t * face, hb_set_t * out);
extern void VARARGS68K _impl_hb_face_collect_variation_unicodes(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t variation_selector, hb_set_t * out);
extern hb_face_t * VARARGS68K _impl_hb_face_builder_create(struct HarfbuzzIFace *);
extern hb_bool_t VARARGS68K _impl_hb_face_builder_add_table(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t tag, hb_blob_t * blob);
extern void VARARGS68K _impl_hb_face_builder_sort_tables(struct HarfbuzzIFace *, hb_face_t * face, const hb_tag_t * tags);
extern hb_font_funcs_t * VARARGS68K _impl_hb_font_funcs_create(struct HarfbuzzIFace *);
extern hb_font_funcs_t * VARARGS68K _impl_hb_font_funcs_get_empty(struct HarfbuzzIFace *);
extern hb_font_funcs_t * VARARGS68K _impl_hb_font_funcs_reference(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs);
extern void VARARGS68K _impl_hb_font_funcs_destroy(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs);
extern hb_bool_t VARARGS68K _impl_hb_font_funcs_set_user_data(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_font_funcs_get_user_data(struct HarfbuzzIFace *, const hb_font_funcs_t * ffuncs, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_font_funcs_make_immutable(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs);
extern hb_bool_t VARARGS68K _impl_hb_font_funcs_is_immutable(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs);
extern void VARARGS68K _impl_hb_font_funcs_set_font_h_extents_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_font_h_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_font_v_extents_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_font_v_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_nominal_glyph_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_nominal_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_nominal_glyphs_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_nominal_glyphs_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_variation_glyph_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_variation_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_h_advance_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_advance_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_v_advance_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_advance_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_h_advances_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_advances_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_v_advances_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_advances_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_h_origin_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_origin_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_v_origin_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_origin_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_h_kerning_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_kerning_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_extents_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_contour_point_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_contour_point_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_name_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_name_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_glyph_from_name_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_get_glyph_from_name_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_draw_glyph_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_draw_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_funcs_set_paint_glyph_func(struct HarfbuzzIFace *, hb_font_funcs_t * ffuncs, hb_font_paint_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern hb_bool_t VARARGS68K _impl_hb_font_get_h_extents(struct HarfbuzzIFace *, hb_font_t * font, hb_font_extents_t * extents);
extern hb_bool_t VARARGS68K _impl_hb_font_get_v_extents(struct HarfbuzzIFace *, hb_font_t * font, hb_font_extents_t * extents);
extern hb_bool_t VARARGS68K _impl_hb_font_get_nominal_glyph(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t * glyph);
extern hb_bool_t VARARGS68K _impl_hb_font_get_variation_glyph(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t * glyph);
extern unsigned int VARARGS68K _impl_hb_font_get_nominal_glyphs(struct HarfbuzzIFace *, hb_font_t * font, unsigned int count, const hb_codepoint_t * first_unicode, unsigned int unicode_stride, hb_codepoint_t * first_glyph, unsigned int glyph_stride);
extern hb_position_t VARARGS68K _impl_hb_font_get_glyph_h_advance(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph);
extern hb_position_t VARARGS68K _impl_hb_font_get_glyph_v_advance(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph);
extern void VARARGS68K _impl_hb_font_get_glyph_h_advances(struct HarfbuzzIFace *, hb_font_t* font, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
extern void VARARGS68K _impl_hb_font_get_glyph_v_advances(struct HarfbuzzIFace *, hb_font_t* font, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_h_origin(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_position_t * x, hb_position_t * y);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_v_origin(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_position_t * x, hb_position_t * y);
extern hb_position_t VARARGS68K _impl_hb_font_get_glyph_h_kerning(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_extents(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_glyph_extents_t * extents);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_contour_point(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t * x, hb_position_t * y);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_name(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, char * name, unsigned int size);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_from_name(struct HarfbuzzIFace *, hb_font_t * font, const char * name, int len, hb_codepoint_t * glyph);
extern void VARARGS68K _impl_hb_font_draw_glyph(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_draw_funcs_t * dfuncs, void * draw_data);
extern void VARARGS68K _impl_hb_font_paint_glyph(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_paint_funcs_t * pfuncs, void * paint_data, unsigned int palette_index, hb_color_t foreground);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t * glyph);
extern void VARARGS68K _impl_hb_font_get_extents_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_direction_t direction, hb_font_extents_t * extents);
extern void VARARGS68K _impl_hb_font_get_glyph_advance_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern void VARARGS68K _impl_hb_font_get_glyph_advances_for_direction(struct HarfbuzzIFace *, hb_font_t* font, hb_direction_t direction, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
extern void VARARGS68K _impl_hb_font_get_glyph_origin_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern void VARARGS68K _impl_hb_font_add_glyph_origin_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern void VARARGS68K _impl_hb_font_subtract_glyph_origin_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern void VARARGS68K _impl_hb_font_get_glyph_kerning_for_direction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_extents_for_origin(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t * extents);
extern hb_bool_t VARARGS68K _impl_hb_font_get_glyph_contour_point_for_origin(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
extern void VARARGS68K _impl_hb_font_glyph_to_string(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, char * s, unsigned int size);
extern hb_bool_t VARARGS68K _impl_hb_font_glyph_from_string(struct HarfbuzzIFace *, hb_font_t * font, const char * s, int len, hb_codepoint_t * glyph);
extern hb_font_t * VARARGS68K _impl_hb_font_create(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_font_t * VARARGS68K _impl_hb_font_create_sub_font(struct HarfbuzzIFace *, hb_font_t * parent);
extern hb_font_t * VARARGS68K _impl_hb_font_get_empty(struct HarfbuzzIFace *);
extern hb_font_t * VARARGS68K _impl_hb_font_reference(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_destroy(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_bool_t VARARGS68K _impl_hb_font_set_user_data(struct HarfbuzzIFace *, hb_font_t * font, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_font_get_user_data(struct HarfbuzzIFace *, const hb_font_t * font, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_font_make_immutable(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_bool_t VARARGS68K _impl_hb_font_is_immutable(struct HarfbuzzIFace *, hb_font_t * font);
extern unsigned int VARARGS68K _impl_hb_font_get_serial(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_changed(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_set_parent(struct HarfbuzzIFace *, hb_font_t * font, hb_font_t * parent);
extern hb_font_t * VARARGS68K _impl_hb_font_get_parent(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_set_face(struct HarfbuzzIFace *, hb_font_t * font, hb_face_t * face);
extern hb_face_t * VARARGS68K _impl_hb_font_get_face(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_set_funcs(struct HarfbuzzIFace *, hb_font_t * font, hb_font_funcs_t * klass, void * font_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_set_funcs_data(struct HarfbuzzIFace *, hb_font_t * font, void * font_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_font_set_scale(struct HarfbuzzIFace *, hb_font_t * font, int x_scale, int y_scale);
extern void VARARGS68K _impl_hb_font_get_scale(struct HarfbuzzIFace *, hb_font_t * font, int * x_scale, int * y_scale);
extern void VARARGS68K _impl_hb_font_set_ppem(struct HarfbuzzIFace *, hb_font_t * font, unsigned int x_ppem, unsigned int y_ppem);
extern void VARARGS68K _impl_hb_font_get_ppem(struct HarfbuzzIFace *, hb_font_t * font, unsigned int * x_ppem, unsigned int * y_ppem);
extern void VARARGS68K _impl_hb_font_set_ptem(struct HarfbuzzIFace *, hb_font_t * font, float ptem);
extern float VARARGS68K _impl_hb_font_get_ptem(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_set_synthetic_bold(struct HarfbuzzIFace *, hb_font_t * font, float x_embolden, float y_embolden, hb_bool_t in_place);
extern void VARARGS68K _impl_hb_font_get_synthetic_bold(struct HarfbuzzIFace *, hb_font_t * font, float * x_embolden, float * y_embolden, hb_bool_t * in_place);
extern void VARARGS68K _impl_hb_font_set_synthetic_slant(struct HarfbuzzIFace *, hb_font_t * font, float slant);
extern float VARARGS68K _impl_hb_font_get_synthetic_slant(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_font_set_variations(struct HarfbuzzIFace *, hb_font_t * font, const hb_variation_t * variations, unsigned int variations_length);
extern void VARARGS68K _impl_hb_font_set_variation(struct HarfbuzzIFace *, hb_font_t * font, hb_tag_t tag, float value);
extern void VARARGS68K _impl_hb_font_set_var_coords_design(struct HarfbuzzIFace *, hb_font_t * font, const float * coords, unsigned int coords_length);
extern const float * VARARGS68K _impl_hb_font_get_var_coords_design(struct HarfbuzzIFace *, hb_font_t * font, unsigned int * length);
extern void VARARGS68K _impl_hb_font_set_var_coords_normalized(struct HarfbuzzIFace *, hb_font_t * font, const int * coords, unsigned int coords_length);
extern const int * VARARGS68K _impl_hb_font_get_var_coords_normalized(struct HarfbuzzIFace *, hb_font_t * font, unsigned int * length);
extern void VARARGS68K _impl_hb_font_set_var_named_instance(struct HarfbuzzIFace *, hb_font_t * font, unsigned int instance_index);
extern unsigned int VARARGS68K _impl_hb_font_get_var_named_instance(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_face_t * VARARGS68K _impl_hb_ft_face_create(struct HarfbuzzIFace *, FT_Face ft_face, hb_destroy_func_t destroy);
extern hb_face_t * VARARGS68K _impl_hb_ft_face_create_cached(struct HarfbuzzIFace *, FT_Face ft_face);
extern hb_face_t * VARARGS68K _impl_hb_ft_face_create_referenced(struct HarfbuzzIFace *, FT_Face ft_face);
extern hb_font_t * VARARGS68K _impl_hb_ft_font_create(struct HarfbuzzIFace *, FT_Face ft_face, hb_destroy_func_t destroy);
extern hb_font_t * VARARGS68K _impl_hb_ft_font_create_referenced(struct HarfbuzzIFace *, FT_Face ft_face);
extern FT_Face VARARGS68K _impl_hb_ft_font_get_face(struct HarfbuzzIFace *, hb_font_t * font);
extern FT_Face VARARGS68K _impl_hb_ft_font_lock_face(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_ft_font_unlock_face(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_ft_font_set_load_flags(struct HarfbuzzIFace *, hb_font_t * font, int load_flags);
extern int VARARGS68K _impl_hb_ft_font_get_load_flags(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_ft_font_changed(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_bool_t VARARGS68K _impl_hb_ft_hb_font_changed(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_ft_font_set_funcs(struct HarfbuzzIFace *, hb_font_t * font);
extern hb_map_t * VARARGS68K _impl_hb_map_create(struct HarfbuzzIFace *);
extern hb_map_t * VARARGS68K _impl_hb_map_get_empty(struct HarfbuzzIFace *);
extern hb_map_t * VARARGS68K _impl_hb_map_reference(struct HarfbuzzIFace *, hb_map_t * map);
extern void VARARGS68K _impl_hb_map_destroy(struct HarfbuzzIFace *, hb_map_t * map);
extern hb_bool_t VARARGS68K _impl_hb_map_set_user_data(struct HarfbuzzIFace *, hb_map_t * map, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_map_get_user_data(struct HarfbuzzIFace *, const hb_map_t * map, hb_user_data_key_t * key);
extern hb_bool_t VARARGS68K _impl_hb_map_allocation_successful(struct HarfbuzzIFace *, const hb_map_t * map);
extern hb_map_t * VARARGS68K _impl_hb_map_copy(struct HarfbuzzIFace *, const hb_map_t * map);
extern void VARARGS68K _impl_hb_map_clear(struct HarfbuzzIFace *, hb_map_t * map);
extern hb_bool_t VARARGS68K _impl_hb_map_is_empty(struct HarfbuzzIFace *, const hb_map_t * map);
extern unsigned int VARARGS68K _impl_hb_map_get_population(struct HarfbuzzIFace *, const hb_map_t * map);
extern hb_bool_t VARARGS68K _impl_hb_map_is_equal(struct HarfbuzzIFace *, const hb_map_t * map, const hb_map_t * other);
extern unsigned int VARARGS68K _impl_hb_map_hash(struct HarfbuzzIFace *, const hb_map_t * map);
extern void VARARGS68K _impl_hb_map_set(struct HarfbuzzIFace *, hb_map_t * map, hb_codepoint_t key, hb_codepoint_t value);
extern hb_codepoint_t VARARGS68K _impl_hb_map_get(struct HarfbuzzIFace *, const hb_map_t * map, hb_codepoint_t key);
extern void VARARGS68K _impl_hb_map_del(struct HarfbuzzIFace *, hb_map_t * map, hb_codepoint_t key);
extern hb_bool_t VARARGS68K _impl_hb_map_has(struct HarfbuzzIFace *, const hb_map_t * map, hb_codepoint_t key);
extern void VARARGS68K _impl_hb_map_update(struct HarfbuzzIFace *, hb_map_t * map, const hb_map_t * other);
extern hb_bool_t VARARGS68K _impl_hb_map_next(struct HarfbuzzIFace *, const hb_map_t * map, int * idx, hb_codepoint_t * key, hb_codepoint_t * value);
extern void VARARGS68K _impl_hb_map_keys(struct HarfbuzzIFace *, const hb_map_t * map, hb_set_t * keys);
extern void VARARGS68K _impl_hb_map_values(struct HarfbuzzIFace *, const hb_map_t * map, hb_set_t * values);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_has_palettes(struct HarfbuzzIFace *, hb_face_t * face);
extern unsigned int VARARGS68K _impl_hb_ot_color_palette_get_count(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_ot_name_id_t VARARGS68K _impl_hb_ot_color_palette_get_name_id(struct HarfbuzzIFace *, hb_face_t * face, unsigned int palette_index);
extern hb_ot_name_id_t VARARGS68K _impl_hb_ot_color_palette_color_get_name_id(struct HarfbuzzIFace *, hb_face_t * face, unsigned int color_index);
extern hb_ot_color_palette_flags_t VARARGS68K _impl_hb_ot_color_palette_get_flags(struct HarfbuzzIFace *, hb_face_t * face, unsigned int palette_index);
extern unsigned int VARARGS68K _impl_hb_ot_color_palette_get_colors(struct HarfbuzzIFace *, hb_face_t * face, unsigned int palette_index, unsigned int start_offset, unsigned int * color_count, hb_color_t * colors);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_has_layers(struct HarfbuzzIFace *, hb_face_t * face);
extern unsigned int VARARGS68K _impl_hb_ot_color_glyph_get_layers(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * layer_count, hb_ot_color_layer_t * layers);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_has_paint(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_glyph_has_paint(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_has_svg(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_blob_t * VARARGS68K _impl_hb_ot_color_glyph_reference_svg(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph);
extern hb_bool_t VARARGS68K _impl_hb_ot_color_has_png(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_blob_t * VARARGS68K _impl_hb_ot_color_glyph_reference_png(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_table_choose_script(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * script_tags, unsigned int * script_index, hb_tag_t * chosen_script);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_script_find_language(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, hb_tag_t language_tag, unsigned int * language_index);
extern void VARARGS68K _impl_hb_ot_tags_from_script(struct HarfbuzzIFace *, hb_script_t script, hb_tag_t * script_tag_1, hb_tag_t * script_tag_2);
extern hb_tag_t VARARGS68K _impl_hb_ot_tag_from_language(struct HarfbuzzIFace *, hb_language_t language);
extern unsigned int VARARGS68K _impl_hb_ot_var_get_axes(struct HarfbuzzIFace *, hb_face_t * face, unsigned int start_offset, unsigned int * axes_count, hb_ot_var_axis_t * axes_array);
extern hb_bool_t VARARGS68K _impl_hb_ot_var_find_axis(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t axis_tag, unsigned int * axis_index, hb_ot_var_axis_t * axis_info);
extern void VARARGS68K _impl_hb_ot_font_set_funcs(struct HarfbuzzIFace *, hb_font_t * font);
extern void VARARGS68K _impl_hb_ot_tags_from_script_and_language(struct HarfbuzzIFace *, hb_script_t script, hb_language_t language, unsigned int * script_count, hb_tag_t * script_tags, unsigned int * language_count, hb_tag_t * language_tags);
extern hb_script_t VARARGS68K _impl_hb_ot_tag_to_script(struct HarfbuzzIFace *, hb_tag_t tag);
extern hb_language_t VARARGS68K _impl_hb_ot_tag_to_language(struct HarfbuzzIFace *, hb_tag_t tag);
extern void VARARGS68K _impl_hb_ot_tags_to_script_and_language(struct HarfbuzzIFace *, hb_tag_t script_tag, hb_tag_t language_tag, hb_script_t * script, hb_language_t * language);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_has_glyph_classes(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_ot_layout_glyph_class_t VARARGS68K _impl_hb_ot_layout_get_glyph_class(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph);
extern void VARARGS68K _impl_hb_ot_layout_get_glyphs_in_class(struct HarfbuzzIFace *, hb_face_t * face, hb_ot_layout_glyph_class_t klass, hb_set_t * glyphs);
extern unsigned int VARARGS68K _impl_hb_ot_layout_get_attach_points(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * point_count, unsigned int * point_array);
extern unsigned int VARARGS68K _impl_hb_ot_layout_get_ligature_carets(struct HarfbuzzIFace *, hb_font_t * font, hb_direction_t direction, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * caret_count, hb_position_t * caret_array);
extern unsigned int VARARGS68K _impl_hb_ot_layout_table_get_script_tags(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int start_offset, unsigned int * script_count, hb_tag_t * script_tags);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_table_find_script(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, hb_tag_t script_tag, unsigned int * script_index);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_table_select_script(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_count, const hb_tag_t * script_tags, unsigned int * script_index, hb_tag_t * chosen_script);
extern unsigned int VARARGS68K _impl_hb_ot_layout_table_get_feature_tags(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int start_offset, unsigned int * feature_count, hb_tag_t * feature_tags);
extern unsigned int VARARGS68K _impl_hb_ot_layout_script_get_language_tags(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int start_offset, unsigned int * language_count, hb_tag_t * language_tags);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_script_select_language(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_count, const hb_tag_t * language_tags, unsigned int * language_index);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_script_select_language2(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_count, const hb_tag_t * language_tags, unsigned int * language_index, hb_tag_t * chosen_language);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_language_get_required_feature_index(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int * feature_index);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_language_get_required_feature(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int * feature_index, hb_tag_t * feature_tag);
extern unsigned int VARARGS68K _impl_hb_ot_layout_language_get_feature_indexes(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int start_offset, unsigned int * feature_count, unsigned int * feature_indexes);
extern unsigned int VARARGS68K _impl_hb_ot_layout_language_get_feature_tags(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int start_offset, unsigned int * feature_count, hb_tag_t * feature_tags);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_language_find_feature(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, hb_tag_t feature_tag, unsigned int * feature_index);
extern unsigned int VARARGS68K _impl_hb_ot_layout_feature_get_lookups(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int start_offset, unsigned int * lookup_count, unsigned int * lookup_indexes);
extern unsigned int VARARGS68K _impl_hb_ot_layout_table_get_lookup_count(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag);
extern void VARARGS68K _impl_hb_ot_layout_collect_features(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * scripts, const hb_tag_t * languages, const hb_tag_t * features, hb_set_t * feature_indexes);
extern void VARARGS68K _impl_hb_ot_layout_collect_features_map(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned script_index, unsigned language_index, hb_map_t * feature_map);
extern void VARARGS68K _impl_hb_ot_layout_collect_lookups(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * scripts, const hb_tag_t * languages, const hb_tag_t * features, hb_set_t * lookup_indexes);
extern void VARARGS68K _impl_hb_ot_layout_lookup_collect_glyphs(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int lookup_index, hb_set_t * glyphs_before, hb_set_t * glyphs_input, hb_set_t * glyphs_after, hb_set_t * glyphs_output);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_table_find_feature_variations(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, const int * coords, unsigned int num_coords, unsigned int * variations_index);
extern unsigned int VARARGS68K _impl_hb_ot_layout_feature_with_variations_get_lookups(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int variations_index, unsigned int start_offset, unsigned int * lookup_count, unsigned int * lookup_indexes);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_has_substitution(struct HarfbuzzIFace *, hb_face_t * face);
extern unsigned VARARGS68K _impl_hb_ot_layout_lookup_get_glyph_alternates(struct HarfbuzzIFace *, hb_face_t * face, unsigned lookup_index, hb_codepoint_t glyph, unsigned start_offset, unsigned * alternate_count, hb_codepoint_t * alternate_glyphs);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_lookup_would_substitute(struct HarfbuzzIFace *, hb_face_t * face, unsigned int lookup_index, const hb_codepoint_t * glyphs, unsigned int glyphs_length, hb_bool_t zero_context);
extern void VARARGS68K _impl_hb_ot_layout_lookup_substitute_closure(struct HarfbuzzIFace *, hb_face_t * face, unsigned int lookup_index, hb_set_t * glyphs);
extern void VARARGS68K _impl_hb_ot_layout_lookups_substitute_closure(struct HarfbuzzIFace *, hb_face_t * face, const hb_set_t * lookups, hb_set_t * glyphs);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_has_positioning(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_get_size_params(struct HarfbuzzIFace *, hb_face_t * face, unsigned int * design_size, unsigned int * subfamily_id, hb_ot_name_id_t * subfamily_name_id, unsigned int * range_start, unsigned int * range_end);
extern hb_position_t VARARGS68K _impl_hb_ot_layout_lookup_get_optical_bound(struct HarfbuzzIFace *, hb_font_t * font, unsigned lookup_index, hb_direction_t direction, hb_codepoint_t glyph);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_feature_get_name_ids(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, hb_ot_name_id_t * label_id, hb_ot_name_id_t * tooltip_id, hb_ot_name_id_t * sample_id, unsigned int * num_named_parameters, hb_ot_name_id_t * first_param_id);
extern unsigned int VARARGS68K _impl_hb_ot_layout_feature_get_characters(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int start_offset, unsigned int * char_count, hb_codepoint_t * characters);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_get_font_extents(struct HarfbuzzIFace *, hb_font_t * font, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_font_extents_t * extents);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_get_font_extents2(struct HarfbuzzIFace *, hb_font_t * font, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_font_extents_t * extents);
extern hb_ot_layout_baseline_tag_t VARARGS68K _impl_hb_ot_layout_get_horizontal_baseline_tag_for_script(struct HarfbuzzIFace *, hb_script_t script);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_get_baseline(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_position_t * coord);
extern hb_bool_t VARARGS68K _impl_hb_ot_layout_get_baseline2(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_position_t * coord);
extern void VARARGS68K _impl_hb_ot_layout_get_baseline_with_fallback(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_position_t * coord);
extern void VARARGS68K _impl_hb_ot_layout_get_baseline_with_fallback2(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_position_t * coord);
extern hb_bool_t VARARGS68K _impl_hb_ot_math_has_data(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_position_t VARARGS68K _impl_hb_ot_math_get_constant(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_math_constant_t constant);
extern hb_position_t VARARGS68K _impl_hb_ot_math_get_glyph_italics_correction(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph);
extern hb_position_t VARARGS68K _impl_hb_ot_math_get_glyph_top_accent_attachment(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph);
extern hb_bool_t VARARGS68K _impl_hb_ot_math_is_glyph_extended_shape(struct HarfbuzzIFace *, hb_face_t * face, hb_codepoint_t glyph);
extern hb_position_t VARARGS68K _impl_hb_ot_math_get_glyph_kerning(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, hb_position_t correction_height);
extern unsigned int VARARGS68K _impl_hb_ot_math_get_glyph_kernings(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, unsigned int start_offset, unsigned int * entries_count, hb_ot_math_kern_entry_t * kern_entries);
extern unsigned int VARARGS68K _impl_hb_ot_math_get_glyph_variants(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int * variants_count, hb_ot_math_glyph_variant_t * variants);
extern hb_position_t VARARGS68K _impl_hb_ot_math_get_min_connector_overlap(struct HarfbuzzIFace *, hb_font_t * font, hb_direction_t direction);
extern unsigned int VARARGS68K _impl_hb_ot_math_get_glyph_assembly(struct HarfbuzzIFace *, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int * parts_count, hb_ot_math_glyph_part_t * parts, hb_position_t * italics_correction);
extern unsigned int VARARGS68K _impl_hb_ot_meta_get_entry_tags(struct HarfbuzzIFace *, hb_face_t * face, unsigned int start_offset, unsigned int * entries_count, hb_ot_meta_tag_t * entries);
extern hb_blob_t * VARARGS68K _impl_hb_ot_meta_reference_entry(struct HarfbuzzIFace *, hb_face_t * face, hb_ot_meta_tag_t meta_tag);
extern hb_bool_t VARARGS68K _impl_hb_ot_metrics_get_position(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag, hb_position_t * position);
extern void VARARGS68K _impl_hb_ot_metrics_get_position_with_fallback(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag, hb_position_t * position);
extern float VARARGS68K _impl_hb_ot_metrics_get_variation(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
extern hb_position_t VARARGS68K _impl_hb_ot_metrics_get_x_variation(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
extern hb_position_t VARARGS68K _impl_hb_ot_metrics_get_y_variation(struct HarfbuzzIFace *, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
extern const hb_ot_name_entry_t * VARARGS68K _impl_hb_ot_name_list_names(struct HarfbuzzIFace *, hb_face_t * face, unsigned int * num_entries);
extern unsigned int VARARGS68K _impl_hb_ot_name_get_utf8(struct HarfbuzzIFace *, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, char * text);
extern unsigned int VARARGS68K _impl_hb_ot_name_get_utf16(struct HarfbuzzIFace *, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, uint16_t * text);
extern unsigned int VARARGS68K _impl_hb_ot_name_get_utf32(struct HarfbuzzIFace *, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, uint32_t * text);
extern void VARARGS68K _impl_hb_ot_shape_glyphs_closure(struct HarfbuzzIFace *, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, hb_set_t * glyphs);
extern void VARARGS68K _impl_hb_ot_shape_plan_collect_lookups(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan, hb_tag_t table_tag, hb_set_t * lookup_indexes);
extern hb_bool_t VARARGS68K _impl_hb_ot_var_has_data(struct HarfbuzzIFace *, hb_face_t * face);
extern unsigned int VARARGS68K _impl_hb_ot_var_get_axis_count(struct HarfbuzzIFace *, hb_face_t * face);
extern unsigned int VARARGS68K _impl_hb_ot_var_get_axis_infos(struct HarfbuzzIFace *, hb_face_t * face, unsigned int start_offset, unsigned int * axes_count, hb_ot_var_axis_info_t * axes_array);
extern hb_bool_t VARARGS68K _impl_hb_ot_var_find_axis_info(struct HarfbuzzIFace *, hb_face_t * face, hb_tag_t axis_tag, hb_ot_var_axis_info_t * axis_info);
extern unsigned int VARARGS68K _impl_hb_ot_var_get_named_instance_count(struct HarfbuzzIFace *, hb_face_t * face);
extern hb_ot_name_id_t VARARGS68K _impl_hb_ot_var_named_instance_get_subfamily_name_id(struct HarfbuzzIFace *, hb_face_t * face, unsigned int instance_index);
extern hb_ot_name_id_t VARARGS68K _impl_hb_ot_var_named_instance_get_postscript_name_id(struct HarfbuzzIFace *, hb_face_t * face, unsigned int instance_index);
extern unsigned int VARARGS68K _impl_hb_ot_var_named_instance_get_design_coords(struct HarfbuzzIFace *, hb_face_t * face, unsigned int instance_index, unsigned int * coords_length, float * coords);
extern void VARARGS68K _impl_hb_ot_var_normalize_variations(struct HarfbuzzIFace *, hb_face_t * face, const hb_variation_t * variations, unsigned int variations_length, int * coords, unsigned int coords_length);
extern void VARARGS68K _impl_hb_ot_var_normalize_coords(struct HarfbuzzIFace *, hb_face_t * face, unsigned int coords_length, const float * design_coords, int * normalized_coords);
extern hb_paint_funcs_t * VARARGS68K _impl_hb_paint_funcs_create(struct HarfbuzzIFace *);
extern hb_paint_funcs_t * VARARGS68K _impl_hb_paint_funcs_get_empty(struct HarfbuzzIFace *);
extern hb_paint_funcs_t * VARARGS68K _impl_hb_paint_funcs_reference(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs);
extern void VARARGS68K _impl_hb_paint_funcs_destroy(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs);
extern hb_bool_t VARARGS68K _impl_hb_paint_funcs_set_user_data(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_paint_funcs_get_user_data(struct HarfbuzzIFace *, const hb_paint_funcs_t * funcs, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_paint_funcs_make_immutable(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs);
extern hb_bool_t VARARGS68K _impl_hb_paint_funcs_is_immutable(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs);
extern unsigned int VARARGS68K _impl_hb_color_line_get_color_stops(struct HarfbuzzIFace *, hb_color_line_t * color_line, unsigned int start, unsigned int * count, hb_color_stop_t * color_stops);
extern hb_paint_extend_t VARARGS68K _impl_hb_color_line_get_extend(struct HarfbuzzIFace *, hb_color_line_t * color_line);
extern void VARARGS68K _impl_hb_paint_funcs_set_push_transform_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_push_transform_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_pop_transform_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_pop_transform_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_color_glyph_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_color_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_push_clip_glyph_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_push_clip_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_push_clip_rectangle_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_push_clip_rectangle_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_pop_clip_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_pop_clip_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_color_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_color_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_image_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_image_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_linear_gradient_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_linear_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_radial_gradient_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_radial_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_sweep_gradient_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_sweep_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_push_group_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_push_group_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_pop_group_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_pop_group_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_funcs_set_custom_palette_color_func(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, hb_paint_custom_palette_color_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_paint_push_transform(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, float xx, float yx, float xy, float yy, float dx, float dy);
extern void VARARGS68K _impl_hb_paint_pop_transform(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data);
extern hb_bool_t VARARGS68K _impl_hb_paint_color_glyph(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_codepoint_t glyph, hb_font_t * font);
extern void VARARGS68K _impl_hb_paint_push_clip_glyph(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_codepoint_t glyph, hb_font_t * font);
extern void VARARGS68K _impl_hb_paint_push_clip_rectangle(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, float xmin, float ymin, float xmax, float ymax);
extern void VARARGS68K _impl_hb_paint_pop_clip(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data);
extern void VARARGS68K _impl_hb_paint_color(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_bool_t is_foreground, hb_color_t color);
extern void VARARGS68K _impl_hb_paint_image(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_blob_t * image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t * extents);
extern void VARARGS68K _impl_hb_paint_linear_gradient(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float x1, float y1, float x2, float y2);
extern void VARARGS68K _impl_hb_paint_radial_gradient(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float r0, float x1, float y1, float r1);
extern void VARARGS68K _impl_hb_paint_sweep_gradient(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float start_angle, float end_angle);
extern void VARARGS68K _impl_hb_paint_push_group(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data);
extern void VARARGS68K _impl_hb_paint_pop_group(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, hb_paint_composite_mode_t mode);
extern hb_bool_t VARARGS68K _impl_hb_paint_custom_palette_color(struct HarfbuzzIFace *, hb_paint_funcs_t * funcs, void * paint_data, unsigned int color_index, hb_color_t * color);
extern hb_set_t * VARARGS68K _impl_hb_set_create(struct HarfbuzzIFace *);
extern hb_set_t * VARARGS68K _impl_hb_set_get_empty(struct HarfbuzzIFace *);
extern hb_set_t * VARARGS68K _impl_hb_set_reference(struct HarfbuzzIFace *, hb_set_t * set);
extern void VARARGS68K _impl_hb_set_destroy(struct HarfbuzzIFace *, hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_set_user_data(struct HarfbuzzIFace *, hb_set_t * set, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_set_get_user_data(struct HarfbuzzIFace *, const hb_set_t * set, hb_user_data_key_t * key);
extern hb_bool_t VARARGS68K _impl_hb_set_allocation_successful(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_set_t * VARARGS68K _impl_hb_set_copy(struct HarfbuzzIFace *, const hb_set_t * set);
extern void VARARGS68K _impl_hb_set_clear(struct HarfbuzzIFace *, hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_is_empty(struct HarfbuzzIFace *, const hb_set_t * set);
extern void VARARGS68K _impl_hb_set_invert(struct HarfbuzzIFace *, hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_is_inverted(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_has(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t codepoint);
extern void VARARGS68K _impl_hb_set_add(struct HarfbuzzIFace *, hb_set_t * set, hb_codepoint_t codepoint);
extern void VARARGS68K _impl_hb_set_add_range(struct HarfbuzzIFace *, hb_set_t * set, hb_codepoint_t first, hb_codepoint_t last);
extern void VARARGS68K _impl_hb_set_add_sorted_array(struct HarfbuzzIFace *, hb_set_t * set, const hb_codepoint_t * sorted_codepoints, unsigned int num_codepoints);
extern void VARARGS68K _impl_hb_set_del(struct HarfbuzzIFace *, hb_set_t * set, hb_codepoint_t codepoint);
extern void VARARGS68K _impl_hb_set_del_range(struct HarfbuzzIFace *, hb_set_t * set, hb_codepoint_t first, hb_codepoint_t last);
extern hb_bool_t VARARGS68K _impl_hb_set_is_equal(struct HarfbuzzIFace *, const hb_set_t * set, const hb_set_t * other);
extern unsigned int VARARGS68K _impl_hb_set_hash(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_is_subset(struct HarfbuzzIFace *, const hb_set_t * set, const hb_set_t * larger_set);
extern void VARARGS68K _impl_hb_set_set(struct HarfbuzzIFace *, hb_set_t * set, const hb_set_t * other);
extern void VARARGS68K _impl_hb_set_union(struct HarfbuzzIFace *, hb_set_t * set, const hb_set_t * other);
extern void VARARGS68K _impl_hb_set_intersect(struct HarfbuzzIFace *, hb_set_t * set, const hb_set_t * other);
extern void VARARGS68K _impl_hb_set_subtract(struct HarfbuzzIFace *, hb_set_t * set, const hb_set_t * other);
extern void VARARGS68K _impl_hb_set_symmetric_difference(struct HarfbuzzIFace *, hb_set_t * set, const hb_set_t * other);
extern unsigned int VARARGS68K _impl_hb_set_get_population(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_codepoint_t VARARGS68K _impl_hb_set_get_min(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_codepoint_t VARARGS68K _impl_hb_set_get_max(struct HarfbuzzIFace *, const hb_set_t * set);
extern hb_bool_t VARARGS68K _impl_hb_set_next(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t * codepoint);
extern hb_bool_t VARARGS68K _impl_hb_set_previous(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t * codepoint);
extern hb_bool_t VARARGS68K _impl_hb_set_next_range(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t * first, hb_codepoint_t * last);
extern hb_bool_t VARARGS68K _impl_hb_set_previous_range(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t * first, hb_codepoint_t * last);
extern unsigned int VARARGS68K _impl_hb_set_next_many(struct HarfbuzzIFace *, const hb_set_t * set, hb_codepoint_t codepoint, hb_codepoint_t * out, unsigned int size);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_create(struct HarfbuzzIFace *, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const char * const * shaper_list);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_create_cached(struct HarfbuzzIFace *, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const char * const * shaper_list);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_create2(struct HarfbuzzIFace *, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const int * coords, unsigned int num_coords, const char * const * shaper_list);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_create_cached2(struct HarfbuzzIFace *, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const int * coords, unsigned int num_coords, const char * const * shaper_list);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_get_empty(struct HarfbuzzIFace *);
extern hb_shape_plan_t * VARARGS68K _impl_hb_shape_plan_reference(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan);
extern void VARARGS68K _impl_hb_shape_plan_destroy(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan);
extern hb_bool_t VARARGS68K _impl_hb_shape_plan_set_user_data(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_shape_plan_get_user_data(struct HarfbuzzIFace *, const hb_shape_plan_t * shape_plan, hb_user_data_key_t * key);
extern hb_bool_t VARARGS68K _impl_hb_shape_plan_execute(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features);
extern const char * VARARGS68K _impl_hb_shape_plan_get_shaper(struct HarfbuzzIFace *, hb_shape_plan_t * shape_plan);
extern void VARARGS68K _impl_hb_shape(struct HarfbuzzIFace *, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features);
extern hb_bool_t VARARGS68K _impl_hb_shape_full(struct HarfbuzzIFace *, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, const char * const * shaper_list);
extern hb_bool_t VARARGS68K _impl_hb_shape_justify(struct HarfbuzzIFace *, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, const char * const * shaper_list, float min_target_advance, float max_target_advance, float * advance, hb_tag_t * var_tag, float * var_value);
extern const char ** VARARGS68K _impl_hb_shape_list_shapers(struct HarfbuzzIFace *);
extern float VARARGS68K _impl_hb_style_get_value(struct HarfbuzzIFace *, hb_font_t * font, hb_style_tag_t style_tag);
extern hb_blob_t* VARARGS68K _impl_hb_subset_repack_or_fail(struct HarfbuzzIFace *, hb_tag_t table_tag, hb_object_t* hb_objects, unsigned num_hb_objs);
extern hb_subset_input_t * VARARGS68K _impl_hb_subset_input_create_or_fail(struct HarfbuzzIFace *);
extern hb_subset_input_t * VARARGS68K _impl_hb_subset_input_reference(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern void VARARGS68K _impl_hb_subset_input_destroy(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_set_user_data(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_subset_input_get_user_data(struct HarfbuzzIFace *, const hb_subset_input_t * input, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_subset_input_keep_everything(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern hb_set_t * VARARGS68K _impl_hb_subset_input_unicode_set(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern hb_set_t * VARARGS68K _impl_hb_subset_input_glyph_set(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern hb_set_t * VARARGS68K _impl_hb_subset_input_set(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_subset_sets_t set_type);
extern hb_map_t* VARARGS68K _impl_hb_subset_input_old_to_new_glyph_mapping(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern hb_subset_flags_t VARARGS68K _impl_hb_subset_input_get_flags(struct HarfbuzzIFace *, hb_subset_input_t * input);
extern void VARARGS68K _impl_hb_subset_input_set_flags(struct HarfbuzzIFace *, hb_subset_input_t * input, unsigned value);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_pin_all_axes_to_default(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_face_t * face);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_pin_axis_to_default(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_pin_axis_location(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag, float axis_value);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_get_axis_range(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_tag_t axis_tag, float * axis_min_value, float * axis_max_value, float * axis_def_value);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_set_axis_range(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag, float axis_min_value, float axis_max_value, float axis_def_value);
extern hb_bool_t VARARGS68K _impl_hb_subset_input_override_name_table(struct HarfbuzzIFace *, hb_subset_input_t * input, hb_ot_name_id_t name_id, unsigned platform_id, unsigned encoding_id, unsigned language_id, const char * name_str, int str_len);
extern hb_face_t * VARARGS68K _impl_hb_subset_preprocess(struct HarfbuzzIFace *, hb_face_t * source);
extern hb_face_t * VARARGS68K _impl_hb_subset_or_fail(struct HarfbuzzIFace *, hb_face_t * source, const hb_subset_input_t * input);
extern hb_face_t * VARARGS68K _impl_hb_subset_plan_execute_or_fail(struct HarfbuzzIFace *, hb_subset_plan_t * plan);
extern hb_subset_plan_t * VARARGS68K _impl_hb_subset_plan_create_or_fail(struct HarfbuzzIFace *, hb_face_t * face, const hb_subset_input_t * input);
extern void VARARGS68K _impl_hb_subset_plan_destroy(struct HarfbuzzIFace *, hb_subset_plan_t * plan);
extern hb_map_t * VARARGS68K _impl_hb_subset_plan_old_to_new_glyph_mapping(struct HarfbuzzIFace *, const hb_subset_plan_t * plan);
extern hb_map_t * VARARGS68K _impl_hb_subset_plan_new_to_old_glyph_mapping(struct HarfbuzzIFace *, const hb_subset_plan_t * plan);
extern hb_map_t * VARARGS68K _impl_hb_subset_plan_unicode_to_old_glyph_mapping(struct HarfbuzzIFace *, const hb_subset_plan_t * plan);
extern hb_subset_plan_t * VARARGS68K _impl_hb_subset_plan_reference(struct HarfbuzzIFace *, hb_subset_plan_t * plan);
extern hb_bool_t VARARGS68K _impl_hb_subset_plan_set_user_data(struct HarfbuzzIFace *, hb_subset_plan_t * plan, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_subset_plan_get_user_data(struct HarfbuzzIFace *, const hb_subset_plan_t * plan, hb_user_data_key_t * key);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_unicode_funcs_get_default(struct HarfbuzzIFace *);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_unicode_funcs_create(struct HarfbuzzIFace *, hb_unicode_funcs_t * parent);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_unicode_funcs_get_empty(struct HarfbuzzIFace *);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_unicode_funcs_reference(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs);
extern void VARARGS68K _impl_hb_unicode_funcs_destroy(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs);
extern hb_bool_t VARARGS68K _impl_hb_unicode_funcs_set_user_data(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
extern void * VARARGS68K _impl_hb_unicode_funcs_get_user_data(struct HarfbuzzIFace *, const hb_unicode_funcs_t * ufuncs, hb_user_data_key_t * key);
extern void VARARGS68K _impl_hb_unicode_funcs_make_immutable(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs);
extern hb_bool_t VARARGS68K _impl_hb_unicode_funcs_is_immutable(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs);
extern hb_unicode_funcs_t * VARARGS68K _impl_hb_unicode_funcs_get_parent(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs);
extern void VARARGS68K _impl_hb_unicode_funcs_set_combining_class_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_combining_class_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_unicode_funcs_set_general_category_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_general_category_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_unicode_funcs_set_mirroring_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_mirroring_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_unicode_funcs_set_script_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_script_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_unicode_funcs_set_compose_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_compose_func_t func, void * user_data, hb_destroy_func_t destroy);
extern void VARARGS68K _impl_hb_unicode_funcs_set_decompose_func(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_unicode_decompose_func_t func, void * user_data, hb_destroy_func_t destroy);
extern hb_unicode_combining_class_t VARARGS68K _impl_hb_unicode_combining_class(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
extern hb_unicode_general_category_t VARARGS68K _impl_hb_unicode_general_category(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
extern hb_codepoint_t VARARGS68K _impl_hb_unicode_mirroring(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
extern hb_script_t VARARGS68K _impl_hb_unicode_script(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
extern hb_bool_t VARARGS68K _impl_hb_unicode_compose(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t * ab);
extern hb_bool_t VARARGS68K _impl_hb_unicode_decompose(struct HarfbuzzIFace *, hb_unicode_funcs_t * ufuncs, hb_codepoint_t ab, hb_codepoint_t * a, hb_codepoint_t * b);
extern void VARARGS68K _impl_hb_version(struct HarfbuzzIFace *, unsigned int * major, unsigned int * minor, unsigned int * micro);
extern const char * VARARGS68K _impl_hb_version_string(struct HarfbuzzIFace *);
extern hb_bool_t VARARGS68K _impl_hb_version_atleast(struct HarfbuzzIFace *, unsigned int major, unsigned int minor, unsigned int micro);

