#ifndef HARFBUZZ_INTERFACE_DEF_H
#define HARFBUZZ_INTERFACE_DEF_H

/*
** This file was machine generated by idltool.py 54.8.
** Do not edit.
*/

#include <exec/types.h>
#include <exec/exec.h>
#include <exec/interfaces.h>

#include <cairo.h>
#include <freetype/freetype.h>
#include <hb.h>
#include <hb-aat.h>
#include <hb-cairo.h>
#include <hb-ft.h>
#include <hb-subset.h>
#include <hb-subset-repacker.h>

#ifdef __cplusplus
#ifdef __USE_AMIGAOS_NAMESPACE__
namespace AmigaOS {
#endif
extern "C" {
#endif

struct HarfbuzzIFace
{
	struct InterfaceData Data;

	uint32 APICALL (*Obtain)(struct HarfbuzzIFace *Self);
	uint32 APICALL (*Release)(struct HarfbuzzIFace *Self);
	APTR Expunge_UNIMPLEMENTED;
	APTR Clone_UNIMPLEMENTED;
	unsigned int APICALL (*hb_aat_layout_get_feature_types)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int start_offset, unsigned int * feature_count, hb_aat_layout_feature_type_t * features);
	hb_ot_name_id_t APICALL (*hb_aat_layout_feature_type_get_name_id)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_aat_layout_feature_type_t feature_type);
	unsigned int APICALL (*hb_aat_layout_feature_type_get_selector_infos)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_aat_layout_feature_type_t feature_type, unsigned int start_offset, unsigned int * selector_count, hb_aat_layout_feature_selector_info_t * selectors, unsigned int * default_index);
	hb_bool_t APICALL (*hb_aat_layout_has_substitution)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_aat_layout_has_positioning)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_aat_layout_has_tracking)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_blob_t * APICALL (*hb_blob_create)(struct HarfbuzzIFace *Self, const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy);
	hb_blob_t * APICALL (*hb_blob_create_or_fail)(struct HarfbuzzIFace *Self, const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy);
	hb_blob_t * APICALL (*hb_blob_create_from_file)(struct HarfbuzzIFace *Self, const char * file_name);
	hb_blob_t * APICALL (*hb_blob_create_from_file_or_fail)(struct HarfbuzzIFace *Self, const char * file_name);
	hb_blob_t * APICALL (*hb_blob_create_sub_blob)(struct HarfbuzzIFace *Self, hb_blob_t * parent, unsigned int offset, unsigned int length);
	hb_blob_t * APICALL (*hb_blob_copy_writable_or_fail)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	hb_blob_t * APICALL (*hb_blob_get_empty)(struct HarfbuzzIFace *Self);
	hb_blob_t * APICALL (*hb_blob_reference)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	void APICALL (*hb_blob_destroy)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	hb_bool_t APICALL (*hb_blob_set_user_data)(struct HarfbuzzIFace *Self, hb_blob_t * blob, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_blob_get_user_data)(struct HarfbuzzIFace *Self, const hb_blob_t * blob, hb_user_data_key_t * key);
	void APICALL (*hb_blob_make_immutable)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	hb_bool_t APICALL (*hb_blob_is_immutable)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	unsigned int APICALL (*hb_blob_get_length)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	const char * APICALL (*hb_blob_get_data)(struct HarfbuzzIFace *Self, hb_blob_t * blob, unsigned int * length);
	char * APICALL (*hb_blob_get_data_writable)(struct HarfbuzzIFace *Self, hb_blob_t * blob, unsigned int * length);
	hb_glyph_flags_t APICALL (*hb_glyph_info_get_glyph_flags)(struct HarfbuzzIFace *Self, const hb_glyph_info_t * info);
	hb_bool_t APICALL (*hb_segment_properties_equal)(struct HarfbuzzIFace *Self, const hb_segment_properties_t * a, const hb_segment_properties_t * b);
	unsigned int APICALL (*hb_segment_properties_hash)(struct HarfbuzzIFace *Self, const hb_segment_properties_t * p);
	void APICALL (*hb_segment_properties_overlay)(struct HarfbuzzIFace *Self, hb_segment_properties_t * p, const hb_segment_properties_t * src);
	hb_buffer_t * APICALL (*hb_buffer_create)(struct HarfbuzzIFace *Self);
	hb_buffer_t * APICALL (*hb_buffer_create_similar)(struct HarfbuzzIFace *Self, const hb_buffer_t * src);
	void APICALL (*hb_buffer_reset)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	hb_buffer_t * APICALL (*hb_buffer_get_empty)(struct HarfbuzzIFace *Self);
	hb_buffer_t * APICALL (*hb_buffer_reference)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_destroy)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	hb_bool_t APICALL (*hb_buffer_set_user_data)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_buffer_get_user_data)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer, hb_user_data_key_t * key);
	void APICALL (*hb_buffer_set_content_type)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_buffer_content_type_t content_type);
	hb_buffer_content_type_t APICALL (*hb_buffer_get_content_type)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_unicode_funcs)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_unicode_funcs_t * unicode_funcs);
	hb_unicode_funcs_t * APICALL (*hb_buffer_get_unicode_funcs)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_direction)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_direction_t direction);
	hb_direction_t APICALL (*hb_buffer_get_direction)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_script)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_script_t script);
	hb_script_t APICALL (*hb_buffer_get_script)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_language)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_language_t language);
	hb_language_t APICALL (*hb_buffer_get_language)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_segment_properties)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const hb_segment_properties_t * props);
	void APICALL (*hb_buffer_get_segment_properties)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer, hb_segment_properties_t * props);
	void APICALL (*hb_buffer_guess_segment_properties)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_flags)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_buffer_flags_t flags);
	hb_buffer_flags_t APICALL (*hb_buffer_get_flags)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_cluster_level)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_buffer_cluster_level_t cluster_level);
	hb_buffer_cluster_level_t APICALL (*hb_buffer_get_cluster_level)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_replacement_codepoint)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_codepoint_t replacement);
	hb_codepoint_t APICALL (*hb_buffer_get_replacement_codepoint)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_invisible_glyph)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_codepoint_t invisible);
	hb_codepoint_t APICALL (*hb_buffer_get_invisible_glyph)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_not_found_glyph)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_codepoint_t not_found);
	hb_codepoint_t APICALL (*hb_buffer_get_not_found_glyph)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_set_random_state)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned state);
	unsigned APICALL (*hb_buffer_get_random_state)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	void APICALL (*hb_buffer_clear_contents)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	hb_bool_t APICALL (*hb_buffer_pre_allocate)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int size);
	hb_bool_t APICALL (*hb_buffer_allocation_successful)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_reverse)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_reverse_range)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int start, unsigned int end);
	void APICALL (*hb_buffer_reverse_clusters)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_add)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_codepoint_t codepoint, unsigned int cluster);
	void APICALL (*hb_buffer_add_utf8)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const char * text, int text_length, unsigned int item_offset, int item_length);
	void APICALL (*hb_buffer_add_utf16)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const uint16_t * text, int text_length, unsigned int item_offset, int item_length);
	void APICALL (*hb_buffer_add_utf32)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const uint32_t * text, int text_length, unsigned int item_offset, int item_length);
	void APICALL (*hb_buffer_add_latin1)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const uint8_t * text, int text_length, unsigned int item_offset, int item_length);
	void APICALL (*hb_buffer_add_codepoints)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const hb_codepoint_t * text, int text_length, unsigned int item_offset, int item_length);
	void APICALL (*hb_buffer_append)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const hb_buffer_t * source, unsigned int start, unsigned int end);
	hb_bool_t APICALL (*hb_buffer_set_length)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int length);
	unsigned int APICALL (*hb_buffer_get_length)(struct HarfbuzzIFace *Self, const hb_buffer_t * buffer);
	hb_glyph_info_t * APICALL (*hb_buffer_get_glyph_infos)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int * length);
	hb_glyph_position_t * APICALL (*hb_buffer_get_glyph_positions)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int * length);
	hb_bool_t APICALL (*hb_buffer_has_positions)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	void APICALL (*hb_buffer_normalize_glyphs)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer);
	hb_buffer_serialize_format_t APICALL (*hb_buffer_serialize_format_from_string)(struct HarfbuzzIFace *Self, const char * str, int len);
	const char * APICALL (*hb_buffer_serialize_format_to_string)(struct HarfbuzzIFace *Self, hb_buffer_serialize_format_t format);
	const char ** APICALL (*hb_buffer_serialize_list_formats)(struct HarfbuzzIFace *Self);
	unsigned int APICALL (*hb_buffer_serialize_glyphs)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_font_t * font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
	unsigned int APICALL (*hb_buffer_serialize_unicode)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
	unsigned int APICALL (*hb_buffer_serialize)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, unsigned int start, unsigned int end, char * buf, unsigned int buf_size, unsigned int * buf_consumed, hb_font_t * font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags);
	hb_bool_t APICALL (*hb_buffer_deserialize_glyphs)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const char * buf, int buf_len, const char * *end_ptr, hb_font_t * font, hb_buffer_serialize_format_t format);
	hb_bool_t APICALL (*hb_buffer_deserialize_unicode)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, const char * buf, int buf_len, const char * *end_ptr, hb_buffer_serialize_format_t format);
	hb_buffer_diff_flags_t APICALL (*hb_buffer_diff)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_buffer_t * reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz);
	void APICALL (*hb_buffer_set_message_func)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_buffer_message_func_t func, void * user_data, hb_destroy_func_t destroy);
	cairo_font_face_t * APICALL (*hb_cairo_font_face_create_for_font)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_font_t * APICALL (*hb_cairo_font_face_get_font)(struct HarfbuzzIFace *Self, cairo_font_face_t * font_face);
	cairo_font_face_t * APICALL (*hb_cairo_font_face_create_for_face)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_face_t * APICALL (*hb_cairo_font_face_get_face)(struct HarfbuzzIFace *Self, cairo_font_face_t * font_face);
	void APICALL (*hb_cairo_font_face_set_font_init_func)(struct HarfbuzzIFace *Self, cairo_font_face_t * font_face, hb_cairo_font_init_func_t func, void * user_data, hb_destroy_func_t destroy);
	hb_font_t * APICALL (*hb_cairo_scaled_font_get_font)(struct HarfbuzzIFace *Self, cairo_scaled_font_t * scaled_font);
	void APICALL (*hb_cairo_font_face_set_scale_factor)(struct HarfbuzzIFace *Self, cairo_font_face_t * font_face, unsigned int scale_factor);
	unsigned int APICALL (*hb_cairo_font_face_get_scale_factor)(struct HarfbuzzIFace *Self, cairo_font_face_t * font_face);
	void APICALL (*hb_cairo_glyphs_from_buffer)(struct HarfbuzzIFace *Self, hb_buffer_t * buffer, hb_bool_t utf8_clusters, double x_scale_factor, double y_scale_factor, double x, double y, const char * utf8, int utf8_len, cairo_glyph_t * *glyphs, unsigned int * num_glyphs, cairo_text_cluster_t * *clusters, unsigned int * num_clusters, cairo_text_cluster_flags_t * cluster_flags);
	hb_tag_t APICALL (*hb_tag_from_string)(struct HarfbuzzIFace *Self, const char * str, int len);
	void APICALL (*hb_tag_to_string)(struct HarfbuzzIFace *Self, hb_tag_t tag, char * buf);
	hb_direction_t APICALL (*hb_direction_from_string)(struct HarfbuzzIFace *Self, const char * str, int len);
	const char * APICALL (*hb_direction_to_string)(struct HarfbuzzIFace *Self, hb_direction_t direction);
	hb_language_t APICALL (*hb_language_from_string)(struct HarfbuzzIFace *Self, const char * str, int len);
	const char * APICALL (*hb_language_to_string)(struct HarfbuzzIFace *Self, hb_language_t language);
	hb_language_t APICALL (*hb_language_get_default)(struct HarfbuzzIFace *Self);
	hb_bool_t APICALL (*hb_language_matches)(struct HarfbuzzIFace *Self, hb_language_t language, hb_language_t specific);
	hb_script_t APICALL (*hb_script_from_iso15924_tag)(struct HarfbuzzIFace *Self, hb_tag_t tag);
	hb_script_t APICALL (*hb_script_from_string)(struct HarfbuzzIFace *Self, const char * str, int len);
	hb_tag_t APICALL (*hb_script_to_iso15924_tag)(struct HarfbuzzIFace *Self, hb_script_t script);
	hb_direction_t APICALL (*hb_script_get_horizontal_direction)(struct HarfbuzzIFace *Self, hb_script_t script);
	hb_bool_t APICALL (*hb_feature_from_string)(struct HarfbuzzIFace *Self, const char * str, int len, hb_feature_t * feature);
	void APICALL (*hb_feature_to_string)(struct HarfbuzzIFace *Self, hb_feature_t * feature, char * buf, unsigned int size);
	hb_bool_t APICALL (*hb_variation_from_string)(struct HarfbuzzIFace *Self, const char * str, int len, hb_variation_t * variation);
	void APICALL (*hb_variation_to_string)(struct HarfbuzzIFace *Self, hb_variation_t * variation, char * buf, unsigned int size);
	uint8_t APICALL (*hb_color_get_alpha)(struct HarfbuzzIFace *Self, hb_color_t color);
	uint8_t APICALL (*hb_color_get_red)(struct HarfbuzzIFace *Self, hb_color_t color);
	uint8_t APICALL (*hb_color_get_green)(struct HarfbuzzIFace *Self, hb_color_t color);
	uint8_t APICALL (*hb_color_get_blue)(struct HarfbuzzIFace *Self, hb_color_t color);
	void APICALL (*hb_font_funcs_set_glyph_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	HB_DEPRECATED void APICALL (*hb_unicode_funcs_set_eastasian_width_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_eastasian_width_func_t func, void * user_data, hb_destroy_func_t destroy);
	HB_DEPRECATED unsigned int APICALL (*hb_unicode_eastasian_width)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
	HB_DEPRECATED void APICALL (*hb_unicode_funcs_set_decompose_compatibility_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_decompose_compatibility_func_t func, void * user_data, hb_destroy_func_t destroy);
	HB_DEPRECATED unsigned int APICALL (*hb_unicode_decompose_compatibility)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t u, hb_codepoint_t * decomposed);
	void APICALL (*hb_font_funcs_set_glyph_v_kerning_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_kerning_func_t func, void * user_data, hb_destroy_func_t destroy);
	hb_position_t APICALL (*hb_font_get_glyph_v_kerning)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);
	void APICALL (*hb_font_funcs_set_glyph_shape_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_shape_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_get_glyph_shape)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_draw_funcs_t * dfuncs, void * draw_data);
	void APICALL (*hb_draw_funcs_set_move_to_func)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_draw_move_to_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_draw_funcs_set_line_to_func)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_draw_line_to_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_draw_funcs_set_quadratic_to_func)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_draw_quadratic_to_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_draw_funcs_set_cubic_to_func)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_draw_cubic_to_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_draw_funcs_set_close_path_func)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_draw_close_path_func_t func, void * user_data, hb_destroy_func_t destroy);
	hb_draw_funcs_t * APICALL (*hb_draw_funcs_create)(struct HarfbuzzIFace *Self);
	hb_draw_funcs_t * APICALL (*hb_draw_funcs_get_empty)(struct HarfbuzzIFace *Self);
	hb_draw_funcs_t * APICALL (*hb_draw_funcs_reference)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs);
	void APICALL (*hb_draw_funcs_destroy)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs);
	hb_bool_t APICALL (*hb_draw_funcs_set_user_data)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_draw_funcs_get_user_data)(struct HarfbuzzIFace *Self, const hb_draw_funcs_t * dfuncs, hb_user_data_key_t * key);
	void APICALL (*hb_draw_funcs_make_immutable)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs);
	hb_bool_t APICALL (*hb_draw_funcs_is_immutable)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs);
	void APICALL (*hb_draw_move_to)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float to_x, float to_y);
	void APICALL (*hb_draw_line_to)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float to_x, float to_y);
	void APICALL (*hb_draw_quadratic_to)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float control_x, float control_y, float to_x, float to_y);
	void APICALL (*hb_draw_cubic_to)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y);
	void APICALL (*hb_draw_close_path)(struct HarfbuzzIFace *Self, hb_draw_funcs_t * dfuncs, void * draw_data, hb_draw_state_t * st);
	unsigned int APICALL (*hb_face_count)(struct HarfbuzzIFace *Self, hb_blob_t * blob);
	hb_face_t * APICALL (*hb_face_create)(struct HarfbuzzIFace *Self, hb_blob_t * blob, unsigned int index);
	hb_face_t * APICALL (*hb_face_create_for_tables)(struct HarfbuzzIFace *Self, hb_reference_table_func_t reference_table_func, void * user_data, hb_destroy_func_t destroy);
	hb_face_t * APICALL (*hb_face_get_empty)(struct HarfbuzzIFace *Self);
	hb_face_t * APICALL (*hb_face_reference)(struct HarfbuzzIFace *Self, hb_face_t * face);
	void APICALL (*hb_face_destroy)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_face_set_user_data)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_face_get_user_data)(struct HarfbuzzIFace *Self, const hb_face_t * face, hb_user_data_key_t * key);
	void APICALL (*hb_face_make_immutable)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_face_is_immutable)(struct HarfbuzzIFace *Self, const hb_face_t * face);
	hb_blob_t * APICALL (*hb_face_reference_table)(struct HarfbuzzIFace *Self, const hb_face_t * face, hb_tag_t tag);
	hb_blob_t * APICALL (*hb_face_reference_blob)(struct HarfbuzzIFace *Self, hb_face_t * face);
	void APICALL (*hb_face_set_index)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int index);
	unsigned int APICALL (*hb_face_get_index)(struct HarfbuzzIFace *Self, const hb_face_t * face);
	void APICALL (*hb_face_set_upem)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int upem);
	unsigned int APICALL (*hb_face_get_upem)(struct HarfbuzzIFace *Self, const hb_face_t * face);
	void APICALL (*hb_face_set_glyph_count)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int glyph_count);
	unsigned int APICALL (*hb_face_get_glyph_count)(struct HarfbuzzIFace *Self, const hb_face_t * face);
	unsigned int APICALL (*hb_face_get_table_tags)(struct HarfbuzzIFace *Self, const hb_face_t * face, unsigned int start_offset, unsigned int * table_count, hb_tag_t * table_tags);
	void APICALL (*hb_face_collect_unicodes)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_set_t * out);
	void APICALL (*hb_face_collect_nominal_glyph_mapping)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_map_t * mapping, hb_set_t * unicodes);
	void APICALL (*hb_face_collect_variation_selectors)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_set_t * out);
	void APICALL (*hb_face_collect_variation_unicodes)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t variation_selector, hb_set_t * out);
	hb_face_t * APICALL (*hb_face_builder_create)(struct HarfbuzzIFace *Self);
	hb_bool_t APICALL (*hb_face_builder_add_table)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t tag, hb_blob_t * blob);
	void APICALL (*hb_face_builder_sort_tables)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_tag_t * tags);
	hb_font_funcs_t * APICALL (*hb_font_funcs_create)(struct HarfbuzzIFace *Self);
	hb_font_funcs_t * APICALL (*hb_font_funcs_get_empty)(struct HarfbuzzIFace *Self);
	hb_font_funcs_t * APICALL (*hb_font_funcs_reference)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs);
	void APICALL (*hb_font_funcs_destroy)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs);
	hb_bool_t APICALL (*hb_font_funcs_set_user_data)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_font_funcs_get_user_data)(struct HarfbuzzIFace *Self, const hb_font_funcs_t * ffuncs, hb_user_data_key_t * key);
	void APICALL (*hb_font_funcs_make_immutable)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs);
	hb_bool_t APICALL (*hb_font_funcs_is_immutable)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs);
	void APICALL (*hb_font_funcs_set_font_h_extents_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_font_h_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_font_v_extents_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_font_v_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_nominal_glyph_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_nominal_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_nominal_glyphs_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_nominal_glyphs_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_variation_glyph_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_variation_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_h_advance_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_advance_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_v_advance_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_advance_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_h_advances_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_advances_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_v_advances_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_advances_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_h_origin_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_origin_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_v_origin_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_v_origin_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_h_kerning_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_h_kerning_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_extents_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_extents_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_contour_point_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_contour_point_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_name_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_name_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_glyph_from_name_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_get_glyph_from_name_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_draw_glyph_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_draw_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_funcs_set_paint_glyph_func)(struct HarfbuzzIFace *Self, hb_font_funcs_t * ffuncs, hb_font_paint_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	hb_bool_t APICALL (*hb_font_get_h_extents)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_font_extents_t * extents);
	hb_bool_t APICALL (*hb_font_get_v_extents)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_font_extents_t * extents);
	hb_bool_t APICALL (*hb_font_get_nominal_glyph)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t * glyph);
	hb_bool_t APICALL (*hb_font_get_variation_glyph)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t * glyph);
	unsigned int APICALL (*hb_font_get_nominal_glyphs)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int count, const hb_codepoint_t * first_unicode, unsigned int unicode_stride, hb_codepoint_t * first_glyph, unsigned int glyph_stride);
	hb_position_t APICALL (*hb_font_get_glyph_h_advance)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph);
	hb_position_t APICALL (*hb_font_get_glyph_v_advance)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph);
	void APICALL (*hb_font_get_glyph_h_advances)(struct HarfbuzzIFace *Self, hb_font_t* font, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
	void APICALL (*hb_font_get_glyph_v_advances)(struct HarfbuzzIFace *Self, hb_font_t* font, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
	hb_bool_t APICALL (*hb_font_get_glyph_h_origin)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_position_t * x, hb_position_t * y);
	hb_bool_t APICALL (*hb_font_get_glyph_v_origin)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_position_t * x, hb_position_t * y);
	hb_position_t APICALL (*hb_font_get_glyph_h_kerning)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);
	hb_bool_t APICALL (*hb_font_get_glyph_extents)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_glyph_extents_t * extents);
	hb_bool_t APICALL (*hb_font_get_glyph_contour_point)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t * x, hb_position_t * y);
	hb_bool_t APICALL (*hb_font_get_glyph_name)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, char * name, unsigned int size);
	hb_bool_t APICALL (*hb_font_get_glyph_from_name)(struct HarfbuzzIFace *Self, hb_font_t * font, const char * name, int len, hb_codepoint_t * glyph);
	void APICALL (*hb_font_draw_glyph)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_draw_funcs_t * dfuncs, void * draw_data);
	void APICALL (*hb_font_paint_glyph)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_paint_funcs_t * pfuncs, void * paint_data, unsigned int palette_index, hb_color_t foreground);
	hb_bool_t APICALL (*hb_font_get_glyph)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t * glyph);
	void APICALL (*hb_font_get_extents_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_direction_t direction, hb_font_extents_t * extents);
	void APICALL (*hb_font_get_glyph_advance_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	void APICALL (*hb_font_get_glyph_advances_for_direction)(struct HarfbuzzIFace *Self, hb_font_t* font, hb_direction_t direction, unsigned int count, const hb_codepoint_t * first_glyph, unsigned glyph_stride, hb_position_t * first_advance, unsigned advance_stride);
	void APICALL (*hb_font_get_glyph_origin_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	void APICALL (*hb_font_add_glyph_origin_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	void APICALL (*hb_font_subtract_glyph_origin_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	void APICALL (*hb_font_get_glyph_kerning_for_direction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	hb_bool_t APICALL (*hb_font_get_glyph_extents_for_origin)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t * extents);
	hb_bool_t APICALL (*hb_font_get_glyph_contour_point_for_origin)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t * x, hb_position_t * y);
	void APICALL (*hb_font_glyph_to_string)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, char * s, unsigned int size);
	hb_bool_t APICALL (*hb_font_glyph_from_string)(struct HarfbuzzIFace *Self, hb_font_t * font, const char * s, int len, hb_codepoint_t * glyph);
	hb_font_t * APICALL (*hb_font_create)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_font_t * APICALL (*hb_font_create_sub_font)(struct HarfbuzzIFace *Self, hb_font_t * parent);
	hb_font_t * APICALL (*hb_font_get_empty)(struct HarfbuzzIFace *Self);
	hb_font_t * APICALL (*hb_font_reference)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_destroy)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_bool_t APICALL (*hb_font_set_user_data)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_font_get_user_data)(struct HarfbuzzIFace *Self, const hb_font_t * font, hb_user_data_key_t * key);
	void APICALL (*hb_font_make_immutable)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_bool_t APICALL (*hb_font_is_immutable)(struct HarfbuzzIFace *Self, hb_font_t * font);
	unsigned int APICALL (*hb_font_get_serial)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_changed)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_set_parent)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_font_t * parent);
	hb_font_t * APICALL (*hb_font_get_parent)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_set_face)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_face_t * face);
	hb_face_t * APICALL (*hb_font_get_face)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_set_funcs)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_font_funcs_t * klass, void * font_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_set_funcs_data)(struct HarfbuzzIFace *Self, hb_font_t * font, void * font_data, hb_destroy_func_t destroy);
	void APICALL (*hb_font_set_scale)(struct HarfbuzzIFace *Self, hb_font_t * font, int x_scale, int y_scale);
	void APICALL (*hb_font_get_scale)(struct HarfbuzzIFace *Self, hb_font_t * font, int * x_scale, int * y_scale);
	void APICALL (*hb_font_set_ppem)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int x_ppem, unsigned int y_ppem);
	void APICALL (*hb_font_get_ppem)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int * x_ppem, unsigned int * y_ppem);
	void APICALL (*hb_font_set_ptem)(struct HarfbuzzIFace *Self, hb_font_t * font, float ptem);
	float APICALL (*hb_font_get_ptem)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_set_synthetic_bold)(struct HarfbuzzIFace *Self, hb_font_t * font, float x_embolden, float y_embolden, hb_bool_t in_place);
	void APICALL (*hb_font_get_synthetic_bold)(struct HarfbuzzIFace *Self, hb_font_t * font, float * x_embolden, float * y_embolden, hb_bool_t * in_place);
	void APICALL (*hb_font_set_synthetic_slant)(struct HarfbuzzIFace *Self, hb_font_t * font, float slant);
	float APICALL (*hb_font_get_synthetic_slant)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_font_set_variations)(struct HarfbuzzIFace *Self, hb_font_t * font, const hb_variation_t * variations, unsigned int variations_length);
	void APICALL (*hb_font_set_variation)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_tag_t tag, float value);
	void APICALL (*hb_font_set_var_coords_design)(struct HarfbuzzIFace *Self, hb_font_t * font, const float * coords, unsigned int coords_length);
	const float * APICALL (*hb_font_get_var_coords_design)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int * length);
	void APICALL (*hb_font_set_var_coords_normalized)(struct HarfbuzzIFace *Self, hb_font_t * font, const int * coords, unsigned int coords_length);
	const int * APICALL (*hb_font_get_var_coords_normalized)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int * length);
	void APICALL (*hb_font_set_var_named_instance)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned int instance_index);
	unsigned int APICALL (*hb_font_get_var_named_instance)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_face_t * APICALL (*hb_ft_face_create)(struct HarfbuzzIFace *Self, FT_Face ft_face, hb_destroy_func_t destroy);
	hb_face_t * APICALL (*hb_ft_face_create_cached)(struct HarfbuzzIFace *Self, FT_Face ft_face);
	hb_face_t * APICALL (*hb_ft_face_create_referenced)(struct HarfbuzzIFace *Self, FT_Face ft_face);
	hb_font_t * APICALL (*hb_ft_font_create)(struct HarfbuzzIFace *Self, FT_Face ft_face, hb_destroy_func_t destroy);
	hb_font_t * APICALL (*hb_ft_font_create_referenced)(struct HarfbuzzIFace *Self, FT_Face ft_face);
	FT_Face APICALL (*hb_ft_font_get_face)(struct HarfbuzzIFace *Self, hb_font_t * font);
	FT_Face APICALL (*hb_ft_font_lock_face)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_ft_font_unlock_face)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_ft_font_set_load_flags)(struct HarfbuzzIFace *Self, hb_font_t * font, int load_flags);
	int APICALL (*hb_ft_font_get_load_flags)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_ft_font_changed)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_bool_t APICALL (*hb_ft_hb_font_changed)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_ft_font_set_funcs)(struct HarfbuzzIFace *Self, hb_font_t * font);
	hb_map_t * APICALL (*hb_map_create)(struct HarfbuzzIFace *Self);
	hb_map_t * APICALL (*hb_map_get_empty)(struct HarfbuzzIFace *Self);
	hb_map_t * APICALL (*hb_map_reference)(struct HarfbuzzIFace *Self, hb_map_t * map);
	void APICALL (*hb_map_destroy)(struct HarfbuzzIFace *Self, hb_map_t * map);
	hb_bool_t APICALL (*hb_map_set_user_data)(struct HarfbuzzIFace *Self, hb_map_t * map, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_map_get_user_data)(struct HarfbuzzIFace *Self, const hb_map_t * map, hb_user_data_key_t * key);
	hb_bool_t APICALL (*hb_map_allocation_successful)(struct HarfbuzzIFace *Self, const hb_map_t * map);
	hb_map_t * APICALL (*hb_map_copy)(struct HarfbuzzIFace *Self, const hb_map_t * map);
	void APICALL (*hb_map_clear)(struct HarfbuzzIFace *Self, hb_map_t * map);
	hb_bool_t APICALL (*hb_map_is_empty)(struct HarfbuzzIFace *Self, const hb_map_t * map);
	unsigned int APICALL (*hb_map_get_population)(struct HarfbuzzIFace *Self, const hb_map_t * map);
	hb_bool_t APICALL (*hb_map_is_equal)(struct HarfbuzzIFace *Self, const hb_map_t * map, const hb_map_t * other);
	unsigned int APICALL (*hb_map_hash)(struct HarfbuzzIFace *Self, const hb_map_t * map);
	void APICALL (*hb_map_set)(struct HarfbuzzIFace *Self, hb_map_t * map, hb_codepoint_t key, hb_codepoint_t value);
	hb_codepoint_t APICALL (*hb_map_get)(struct HarfbuzzIFace *Self, const hb_map_t * map, hb_codepoint_t key);
	void APICALL (*hb_map_del)(struct HarfbuzzIFace *Self, hb_map_t * map, hb_codepoint_t key);
	hb_bool_t APICALL (*hb_map_has)(struct HarfbuzzIFace *Self, const hb_map_t * map, hb_codepoint_t key);
	void APICALL (*hb_map_update)(struct HarfbuzzIFace *Self, hb_map_t * map, const hb_map_t * other);
	hb_bool_t APICALL (*hb_map_next)(struct HarfbuzzIFace *Self, const hb_map_t * map, int * idx, hb_codepoint_t * key, hb_codepoint_t * value);
	void APICALL (*hb_map_keys)(struct HarfbuzzIFace *Self, const hb_map_t * map, hb_set_t * keys);
	void APICALL (*hb_map_values)(struct HarfbuzzIFace *Self, const hb_map_t * map, hb_set_t * values);
	hb_bool_t APICALL (*hb_ot_color_has_palettes)(struct HarfbuzzIFace *Self, hb_face_t * face);
	unsigned int APICALL (*hb_ot_color_palette_get_count)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_ot_name_id_t APICALL (*hb_ot_color_palette_get_name_id)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int palette_index);
	hb_ot_name_id_t APICALL (*hb_ot_color_palette_color_get_name_id)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int color_index);
	hb_ot_color_palette_flags_t APICALL (*hb_ot_color_palette_get_flags)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int palette_index);
	unsigned int APICALL (*hb_ot_color_palette_get_colors)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int palette_index, unsigned int start_offset, unsigned int * color_count, hb_color_t * colors);
	hb_bool_t APICALL (*hb_ot_color_has_layers)(struct HarfbuzzIFace *Self, hb_face_t * face);
	unsigned int APICALL (*hb_ot_color_glyph_get_layers)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * layer_count, hb_ot_color_layer_t * layers);
	hb_bool_t APICALL (*hb_ot_color_has_paint)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_ot_color_glyph_has_paint)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph);
	hb_bool_t APICALL (*hb_ot_color_has_svg)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_blob_t * APICALL (*hb_ot_color_glyph_reference_svg)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph);
	hb_bool_t APICALL (*hb_ot_color_has_png)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_blob_t * APICALL (*hb_ot_color_glyph_reference_png)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph);
	hb_bool_t APICALL (*hb_ot_layout_table_choose_script)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * script_tags, unsigned int * script_index, hb_tag_t * chosen_script);
	hb_bool_t APICALL (*hb_ot_layout_script_find_language)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, hb_tag_t language_tag, unsigned int * language_index);
	void APICALL (*hb_ot_tags_from_script)(struct HarfbuzzIFace *Self, hb_script_t script, hb_tag_t * script_tag_1, hb_tag_t * script_tag_2);
	hb_tag_t APICALL (*hb_ot_tag_from_language)(struct HarfbuzzIFace *Self, hb_language_t language);
	unsigned int APICALL (*hb_ot_var_get_axes)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int start_offset, unsigned int * axes_count, hb_ot_var_axis_t * axes_array);
	hb_bool_t APICALL (*hb_ot_var_find_axis)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t axis_tag, unsigned int * axis_index, hb_ot_var_axis_t * axis_info);
	void APICALL (*hb_ot_font_set_funcs)(struct HarfbuzzIFace *Self, hb_font_t * font);
	void APICALL (*hb_ot_tags_from_script_and_language)(struct HarfbuzzIFace *Self, hb_script_t script, hb_language_t language, unsigned int * script_count, hb_tag_t * script_tags, unsigned int * language_count, hb_tag_t * language_tags);
	hb_script_t APICALL (*hb_ot_tag_to_script)(struct HarfbuzzIFace *Self, hb_tag_t tag);
	hb_language_t APICALL (*hb_ot_tag_to_language)(struct HarfbuzzIFace *Self, hb_tag_t tag);
	void APICALL (*hb_ot_tags_to_script_and_language)(struct HarfbuzzIFace *Self, hb_tag_t script_tag, hb_tag_t language_tag, hb_script_t * script, hb_language_t * language);
	hb_bool_t APICALL (*hb_ot_layout_has_glyph_classes)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_ot_layout_glyph_class_t APICALL (*hb_ot_layout_get_glyph_class)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph);
	void APICALL (*hb_ot_layout_get_glyphs_in_class)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_ot_layout_glyph_class_t klass, hb_set_t * glyphs);
	unsigned int APICALL (*hb_ot_layout_get_attach_points)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * point_count, unsigned int * point_array);
	unsigned int APICALL (*hb_ot_layout_get_ligature_carets)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_direction_t direction, hb_codepoint_t glyph, unsigned int start_offset, unsigned int * caret_count, hb_position_t * caret_array);
	unsigned int APICALL (*hb_ot_layout_table_get_script_tags)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int start_offset, unsigned int * script_count, hb_tag_t * script_tags);
	hb_bool_t APICALL (*hb_ot_layout_table_find_script)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, hb_tag_t script_tag, unsigned int * script_index);
	hb_bool_t APICALL (*hb_ot_layout_table_select_script)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_count, const hb_tag_t * script_tags, unsigned int * script_index, hb_tag_t * chosen_script);
	unsigned int APICALL (*hb_ot_layout_table_get_feature_tags)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int start_offset, unsigned int * feature_count, hb_tag_t * feature_tags);
	unsigned int APICALL (*hb_ot_layout_script_get_language_tags)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int start_offset, unsigned int * language_count, hb_tag_t * language_tags);
	hb_bool_t APICALL (*hb_ot_layout_script_select_language)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_count, const hb_tag_t * language_tags, unsigned int * language_index);
	hb_bool_t APICALL (*hb_ot_layout_script_select_language2)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_count, const hb_tag_t * language_tags, unsigned int * language_index, hb_tag_t * chosen_language);
	hb_bool_t APICALL (*hb_ot_layout_language_get_required_feature_index)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int * feature_index);
	hb_bool_t APICALL (*hb_ot_layout_language_get_required_feature)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int * feature_index, hb_tag_t * feature_tag);
	unsigned int APICALL (*hb_ot_layout_language_get_feature_indexes)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int start_offset, unsigned int * feature_count, unsigned int * feature_indexes);
	unsigned int APICALL (*hb_ot_layout_language_get_feature_tags)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, unsigned int start_offset, unsigned int * feature_count, hb_tag_t * feature_tags);
	hb_bool_t APICALL (*hb_ot_layout_language_find_feature)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int script_index, unsigned int language_index, hb_tag_t feature_tag, unsigned int * feature_index);
	unsigned int APICALL (*hb_ot_layout_feature_get_lookups)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int start_offset, unsigned int * lookup_count, unsigned int * lookup_indexes);
	unsigned int APICALL (*hb_ot_layout_table_get_lookup_count)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag);
	void APICALL (*hb_ot_layout_collect_features)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * scripts, const hb_tag_t * languages, const hb_tag_t * features, hb_set_t * feature_indexes);
	void APICALL (*hb_ot_layout_collect_features_map)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned script_index, unsigned language_index, hb_map_t * feature_map);
	void APICALL (*hb_ot_layout_collect_lookups)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, const hb_tag_t * scripts, const hb_tag_t * languages, const hb_tag_t * features, hb_set_t * lookup_indexes);
	void APICALL (*hb_ot_layout_lookup_collect_glyphs)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int lookup_index, hb_set_t * glyphs_before, hb_set_t * glyphs_input, hb_set_t * glyphs_after, hb_set_t * glyphs_output);
	hb_bool_t APICALL (*hb_ot_layout_table_find_feature_variations)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, const int * coords, unsigned int num_coords, unsigned int * variations_index);
	unsigned int APICALL (*hb_ot_layout_feature_with_variations_get_lookups)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int variations_index, unsigned int start_offset, unsigned int * lookup_count, unsigned int * lookup_indexes);
	hb_bool_t APICALL (*hb_ot_layout_has_substitution)(struct HarfbuzzIFace *Self, hb_face_t * face);
	unsigned APICALL (*hb_ot_layout_lookup_get_glyph_alternates)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned lookup_index, hb_codepoint_t glyph, unsigned start_offset, unsigned * alternate_count, hb_codepoint_t * alternate_glyphs);
	hb_bool_t APICALL (*hb_ot_layout_lookup_would_substitute)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int lookup_index, const hb_codepoint_t * glyphs, unsigned int glyphs_length, hb_bool_t zero_context);
	void APICALL (*hb_ot_layout_lookup_substitute_closure)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int lookup_index, hb_set_t * glyphs);
	void APICALL (*hb_ot_layout_lookups_substitute_closure)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_set_t * lookups, hb_set_t * glyphs);
	hb_bool_t APICALL (*hb_ot_layout_has_positioning)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_bool_t APICALL (*hb_ot_layout_get_size_params)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int * design_size, unsigned int * subfamily_id, hb_ot_name_id_t * subfamily_name_id, unsigned int * range_start, unsigned int * range_end);
	hb_position_t APICALL (*hb_ot_layout_lookup_get_optical_bound)(struct HarfbuzzIFace *Self, hb_font_t * font, unsigned lookup_index, hb_direction_t direction, hb_codepoint_t glyph);
	hb_bool_t APICALL (*hb_ot_layout_feature_get_name_ids)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, hb_ot_name_id_t * label_id, hb_ot_name_id_t * tooltip_id, hb_ot_name_id_t * sample_id, unsigned int * num_named_parameters, hb_ot_name_id_t * first_param_id);
	unsigned int APICALL (*hb_ot_layout_feature_get_characters)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t table_tag, unsigned int feature_index, unsigned int start_offset, unsigned int * char_count, hb_codepoint_t * characters);
	hb_bool_t APICALL (*hb_ot_layout_get_font_extents)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_font_extents_t * extents);
	hb_bool_t APICALL (*hb_ot_layout_get_font_extents2)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_font_extents_t * extents);
	hb_ot_layout_baseline_tag_t APICALL (*hb_ot_layout_get_horizontal_baseline_tag_for_script)(struct HarfbuzzIFace *Self, hb_script_t script);
	hb_bool_t APICALL (*hb_ot_layout_get_baseline)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_position_t * coord);
	hb_bool_t APICALL (*hb_ot_layout_get_baseline2)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_position_t * coord);
	void APICALL (*hb_ot_layout_get_baseline_with_fallback)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_tag_t script_tag, hb_tag_t language_tag, hb_position_t * coord);
	void APICALL (*hb_ot_layout_get_baseline_with_fallback2)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_layout_baseline_tag_t baseline_tag, hb_direction_t direction, hb_script_t script, hb_language_t language, hb_position_t * coord);
	hb_bool_t APICALL (*hb_ot_math_has_data)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_position_t APICALL (*hb_ot_math_get_constant)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_math_constant_t constant);
	hb_position_t APICALL (*hb_ot_math_get_glyph_italics_correction)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph);
	hb_position_t APICALL (*hb_ot_math_get_glyph_top_accent_attachment)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph);
	hb_bool_t APICALL (*hb_ot_math_is_glyph_extended_shape)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_codepoint_t glyph);
	hb_position_t APICALL (*hb_ot_math_get_glyph_kerning)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, hb_position_t correction_height);
	unsigned int APICALL (*hb_ot_math_get_glyph_kernings)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, unsigned int start_offset, unsigned int * entries_count, hb_ot_math_kern_entry_t * kern_entries);
	unsigned int APICALL (*hb_ot_math_get_glyph_variants)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int * variants_count, hb_ot_math_glyph_variant_t * variants);
	hb_position_t APICALL (*hb_ot_math_get_min_connector_overlap)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_direction_t direction);
	unsigned int APICALL (*hb_ot_math_get_glyph_assembly)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int * parts_count, hb_ot_math_glyph_part_t * parts, hb_position_t * italics_correction);
	unsigned int APICALL (*hb_ot_meta_get_entry_tags)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int start_offset, unsigned int * entries_count, hb_ot_meta_tag_t * entries);
	hb_blob_t * APICALL (*hb_ot_meta_reference_entry)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_ot_meta_tag_t meta_tag);
	hb_bool_t APICALL (*hb_ot_metrics_get_position)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag, hb_position_t * position);
	void APICALL (*hb_ot_metrics_get_position_with_fallback)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag, hb_position_t * position);
	float APICALL (*hb_ot_metrics_get_variation)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
	hb_position_t APICALL (*hb_ot_metrics_get_x_variation)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
	hb_position_t APICALL (*hb_ot_metrics_get_y_variation)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_ot_metrics_tag_t metrics_tag);
	const hb_ot_name_entry_t * APICALL (*hb_ot_name_list_names)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int * num_entries);
	unsigned int APICALL (*hb_ot_name_get_utf8)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, char * text);
	unsigned int APICALL (*hb_ot_name_get_utf16)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, uint16_t * text);
	unsigned int APICALL (*hb_ot_name_get_utf32)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int * text_size, uint32_t * text);
	void APICALL (*hb_ot_shape_glyphs_closure)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, hb_set_t * glyphs);
	void APICALL (*hb_ot_shape_plan_collect_lookups)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan, hb_tag_t table_tag, hb_set_t * lookup_indexes);
	hb_bool_t APICALL (*hb_ot_var_has_data)(struct HarfbuzzIFace *Self, hb_face_t * face);
	unsigned int APICALL (*hb_ot_var_get_axis_count)(struct HarfbuzzIFace *Self, hb_face_t * face);
	unsigned int APICALL (*hb_ot_var_get_axis_infos)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int start_offset, unsigned int * axes_count, hb_ot_var_axis_info_t * axes_array);
	hb_bool_t APICALL (*hb_ot_var_find_axis_info)(struct HarfbuzzIFace *Self, hb_face_t * face, hb_tag_t axis_tag, hb_ot_var_axis_info_t * axis_info);
	unsigned int APICALL (*hb_ot_var_get_named_instance_count)(struct HarfbuzzIFace *Self, hb_face_t * face);
	hb_ot_name_id_t APICALL (*hb_ot_var_named_instance_get_subfamily_name_id)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int instance_index);
	hb_ot_name_id_t APICALL (*hb_ot_var_named_instance_get_postscript_name_id)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int instance_index);
	unsigned int APICALL (*hb_ot_var_named_instance_get_design_coords)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int instance_index, unsigned int * coords_length, float * coords);
	void APICALL (*hb_ot_var_normalize_variations)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_variation_t * variations, unsigned int variations_length, int * coords, unsigned int coords_length);
	void APICALL (*hb_ot_var_normalize_coords)(struct HarfbuzzIFace *Self, hb_face_t * face, unsigned int coords_length, const float * design_coords, int * normalized_coords);
	hb_paint_funcs_t * APICALL (*hb_paint_funcs_create)(struct HarfbuzzIFace *Self);
	hb_paint_funcs_t * APICALL (*hb_paint_funcs_get_empty)(struct HarfbuzzIFace *Self);
	hb_paint_funcs_t * APICALL (*hb_paint_funcs_reference)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs);
	void APICALL (*hb_paint_funcs_destroy)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs);
	hb_bool_t APICALL (*hb_paint_funcs_set_user_data)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_paint_funcs_get_user_data)(struct HarfbuzzIFace *Self, const hb_paint_funcs_t * funcs, hb_user_data_key_t * key);
	void APICALL (*hb_paint_funcs_make_immutable)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs);
	hb_bool_t APICALL (*hb_paint_funcs_is_immutable)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs);
	unsigned int APICALL (*hb_color_line_get_color_stops)(struct HarfbuzzIFace *Self, hb_color_line_t * color_line, unsigned int start, unsigned int * count, hb_color_stop_t * color_stops);
	hb_paint_extend_t APICALL (*hb_color_line_get_extend)(struct HarfbuzzIFace *Self, hb_color_line_t * color_line);
	void APICALL (*hb_paint_funcs_set_push_transform_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_push_transform_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_pop_transform_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_pop_transform_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_color_glyph_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_color_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_push_clip_glyph_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_push_clip_glyph_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_push_clip_rectangle_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_push_clip_rectangle_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_pop_clip_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_pop_clip_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_color_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_color_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_image_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_image_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_linear_gradient_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_linear_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_radial_gradient_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_radial_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_sweep_gradient_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_sweep_gradient_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_push_group_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_push_group_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_pop_group_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_pop_group_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_funcs_set_custom_palette_color_func)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, hb_paint_custom_palette_color_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_paint_push_transform)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, float xx, float yx, float xy, float yy, float dx, float dy);
	void APICALL (*hb_paint_pop_transform)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data);
	hb_bool_t APICALL (*hb_paint_color_glyph)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_codepoint_t glyph, hb_font_t * font);
	void APICALL (*hb_paint_push_clip_glyph)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_codepoint_t glyph, hb_font_t * font);
	void APICALL (*hb_paint_push_clip_rectangle)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, float xmin, float ymin, float xmax, float ymax);
	void APICALL (*hb_paint_pop_clip)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data);
	void APICALL (*hb_paint_color)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_bool_t is_foreground, hb_color_t color);
	void APICALL (*hb_paint_image)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_blob_t * image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t * extents);
	void APICALL (*hb_paint_linear_gradient)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float x1, float y1, float x2, float y2);
	void APICALL (*hb_paint_radial_gradient)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float r0, float x1, float y1, float r1);
	void APICALL (*hb_paint_sweep_gradient)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_color_line_t * color_line, float x0, float y0, float start_angle, float end_angle);
	void APICALL (*hb_paint_push_group)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data);
	void APICALL (*hb_paint_pop_group)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, hb_paint_composite_mode_t mode);
	hb_bool_t APICALL (*hb_paint_custom_palette_color)(struct HarfbuzzIFace *Self, hb_paint_funcs_t * funcs, void * paint_data, unsigned int color_index, hb_color_t * color);
	hb_set_t * APICALL (*hb_set_create)(struct HarfbuzzIFace *Self);
	hb_set_t * APICALL (*hb_set_get_empty)(struct HarfbuzzIFace *Self);
	hb_set_t * APICALL (*hb_set_reference)(struct HarfbuzzIFace *Self, hb_set_t * set);
	void APICALL (*hb_set_destroy)(struct HarfbuzzIFace *Self, hb_set_t * set);
	hb_bool_t APICALL (*hb_set_set_user_data)(struct HarfbuzzIFace *Self, hb_set_t * set, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_set_get_user_data)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_user_data_key_t * key);
	hb_bool_t APICALL (*hb_set_allocation_successful)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_set_t * APICALL (*hb_set_copy)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	void APICALL (*hb_set_clear)(struct HarfbuzzIFace *Self, hb_set_t * set);
	hb_bool_t APICALL (*hb_set_is_empty)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	void APICALL (*hb_set_invert)(struct HarfbuzzIFace *Self, hb_set_t * set);
	hb_bool_t APICALL (*hb_set_is_inverted)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_bool_t APICALL (*hb_set_has)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t codepoint);
	void APICALL (*hb_set_add)(struct HarfbuzzIFace *Self, hb_set_t * set, hb_codepoint_t codepoint);
	void APICALL (*hb_set_add_range)(struct HarfbuzzIFace *Self, hb_set_t * set, hb_codepoint_t first, hb_codepoint_t last);
	void APICALL (*hb_set_add_sorted_array)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_codepoint_t * sorted_codepoints, unsigned int num_codepoints);
	void APICALL (*hb_set_del)(struct HarfbuzzIFace *Self, hb_set_t * set, hb_codepoint_t codepoint);
	void APICALL (*hb_set_del_range)(struct HarfbuzzIFace *Self, hb_set_t * set, hb_codepoint_t first, hb_codepoint_t last);
	hb_bool_t APICALL (*hb_set_is_equal)(struct HarfbuzzIFace *Self, const hb_set_t * set, const hb_set_t * other);
	unsigned int APICALL (*hb_set_hash)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_bool_t APICALL (*hb_set_is_subset)(struct HarfbuzzIFace *Self, const hb_set_t * set, const hb_set_t * larger_set);
	void APICALL (*hb_set_set)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_set_t * other);
	void APICALL (*hb_set_union)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_set_t * other);
	void APICALL (*hb_set_intersect)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_set_t * other);
	void APICALL (*hb_set_subtract)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_set_t * other);
	void APICALL (*hb_set_symmetric_difference)(struct HarfbuzzIFace *Self, hb_set_t * set, const hb_set_t * other);
	unsigned int APICALL (*hb_set_get_population)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_codepoint_t APICALL (*hb_set_get_min)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_codepoint_t APICALL (*hb_set_get_max)(struct HarfbuzzIFace *Self, const hb_set_t * set);
	hb_bool_t APICALL (*hb_set_next)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t * codepoint);
	hb_bool_t APICALL (*hb_set_previous)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t * codepoint);
	hb_bool_t APICALL (*hb_set_next_range)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t * first, hb_codepoint_t * last);
	hb_bool_t APICALL (*hb_set_previous_range)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t * first, hb_codepoint_t * last);
	unsigned int APICALL (*hb_set_next_many)(struct HarfbuzzIFace *Self, const hb_set_t * set, hb_codepoint_t codepoint, hb_codepoint_t * out, unsigned int size);
	hb_shape_plan_t * APICALL (*hb_shape_plan_create)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const char * const * shaper_list);
	hb_shape_plan_t * APICALL (*hb_shape_plan_create_cached)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const char * const * shaper_list);
	hb_shape_plan_t * APICALL (*hb_shape_plan_create2)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const int * coords, unsigned int num_coords, const char * const * shaper_list);
	hb_shape_plan_t * APICALL (*hb_shape_plan_create_cached2)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_segment_properties_t * props, const hb_feature_t * user_features, unsigned int num_user_features, const int * coords, unsigned int num_coords, const char * const * shaper_list);
	hb_shape_plan_t * APICALL (*hb_shape_plan_get_empty)(struct HarfbuzzIFace *Self);
	hb_shape_plan_t * APICALL (*hb_shape_plan_reference)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan);
	void APICALL (*hb_shape_plan_destroy)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan);
	hb_bool_t APICALL (*hb_shape_plan_set_user_data)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_shape_plan_get_user_data)(struct HarfbuzzIFace *Self, const hb_shape_plan_t * shape_plan, hb_user_data_key_t * key);
	hb_bool_t APICALL (*hb_shape_plan_execute)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features);
	const char * APICALL (*hb_shape_plan_get_shaper)(struct HarfbuzzIFace *Self, hb_shape_plan_t * shape_plan);
	void APICALL (*hb_shape)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features);
	hb_bool_t APICALL (*hb_shape_full)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, const char * const * shaper_list);
	hb_bool_t APICALL (*hb_shape_justify)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_buffer_t * buffer, const hb_feature_t * features, unsigned int num_features, const char * const * shaper_list, float min_target_advance, float max_target_advance, float * advance, hb_tag_t * var_tag, float * var_value);
	const char ** APICALL (*hb_shape_list_shapers)(struct HarfbuzzIFace *Self);
	float APICALL (*hb_style_get_value)(struct HarfbuzzIFace *Self, hb_font_t * font, hb_style_tag_t style_tag);
	hb_blob_t* APICALL (*hb_subset_repack_or_fail)(struct HarfbuzzIFace *Self, hb_tag_t table_tag, hb_object_t* hb_objects, unsigned num_hb_objs);
	hb_subset_input_t * APICALL (*hb_subset_input_create_or_fail)(struct HarfbuzzIFace *Self);
	hb_subset_input_t * APICALL (*hb_subset_input_reference)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	void APICALL (*hb_subset_input_destroy)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	hb_bool_t APICALL (*hb_subset_input_set_user_data)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_subset_input_get_user_data)(struct HarfbuzzIFace *Self, const hb_subset_input_t * input, hb_user_data_key_t * key);
	void APICALL (*hb_subset_input_keep_everything)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	hb_set_t * APICALL (*hb_subset_input_unicode_set)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	hb_set_t * APICALL (*hb_subset_input_glyph_set)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	hb_set_t * APICALL (*hb_subset_input_set)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_subset_sets_t set_type);
	hb_map_t* APICALL (*hb_subset_input_old_to_new_glyph_mapping)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	hb_subset_flags_t APICALL (*hb_subset_input_get_flags)(struct HarfbuzzIFace *Self, hb_subset_input_t * input);
	void APICALL (*hb_subset_input_set_flags)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, unsigned value);
	hb_bool_t APICALL (*hb_subset_input_pin_all_axes_to_default)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_face_t * face);
	hb_bool_t APICALL (*hb_subset_input_pin_axis_to_default)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag);
	hb_bool_t APICALL (*hb_subset_input_pin_axis_location)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag, float axis_value);
	hb_bool_t APICALL (*hb_subset_input_get_axis_range)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_tag_t axis_tag, float * axis_min_value, float * axis_max_value, float * axis_def_value);
	hb_bool_t APICALL (*hb_subset_input_set_axis_range)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_face_t * face, hb_tag_t axis_tag, float axis_min_value, float axis_max_value, float axis_def_value);
	hb_bool_t APICALL (*hb_subset_input_override_name_table)(struct HarfbuzzIFace *Self, hb_subset_input_t * input, hb_ot_name_id_t name_id, unsigned platform_id, unsigned encoding_id, unsigned language_id, const char * name_str, int str_len);
	hb_face_t * APICALL (*hb_subset_preprocess)(struct HarfbuzzIFace *Self, hb_face_t * source);
	hb_face_t * APICALL (*hb_subset_or_fail)(struct HarfbuzzIFace *Self, hb_face_t * source, const hb_subset_input_t * input);
	hb_face_t * APICALL (*hb_subset_plan_execute_or_fail)(struct HarfbuzzIFace *Self, hb_subset_plan_t * plan);
	hb_subset_plan_t * APICALL (*hb_subset_plan_create_or_fail)(struct HarfbuzzIFace *Self, hb_face_t * face, const hb_subset_input_t * input);
	void APICALL (*hb_subset_plan_destroy)(struct HarfbuzzIFace *Self, hb_subset_plan_t * plan);
	hb_map_t * APICALL (*hb_subset_plan_old_to_new_glyph_mapping)(struct HarfbuzzIFace *Self, const hb_subset_plan_t * plan);
	hb_map_t * APICALL (*hb_subset_plan_new_to_old_glyph_mapping)(struct HarfbuzzIFace *Self, const hb_subset_plan_t * plan);
	hb_map_t * APICALL (*hb_subset_plan_unicode_to_old_glyph_mapping)(struct HarfbuzzIFace *Self, const hb_subset_plan_t * plan);
	hb_subset_plan_t * APICALL (*hb_subset_plan_reference)(struct HarfbuzzIFace *Self, hb_subset_plan_t * plan);
	hb_bool_t APICALL (*hb_subset_plan_set_user_data)(struct HarfbuzzIFace *Self, hb_subset_plan_t * plan, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_subset_plan_get_user_data)(struct HarfbuzzIFace *Self, const hb_subset_plan_t * plan, hb_user_data_key_t * key);
	hb_unicode_funcs_t * APICALL (*hb_unicode_funcs_get_default)(struct HarfbuzzIFace *Self);
	hb_unicode_funcs_t * APICALL (*hb_unicode_funcs_create)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * parent);
	hb_unicode_funcs_t * APICALL (*hb_unicode_funcs_get_empty)(struct HarfbuzzIFace *Self);
	hb_unicode_funcs_t * APICALL (*hb_unicode_funcs_reference)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs);
	void APICALL (*hb_unicode_funcs_destroy)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs);
	hb_bool_t APICALL (*hb_unicode_funcs_set_user_data)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_user_data_key_t * key, void * data, hb_destroy_func_t destroy, hb_bool_t replace);
	void * APICALL (*hb_unicode_funcs_get_user_data)(struct HarfbuzzIFace *Self, const hb_unicode_funcs_t * ufuncs, hb_user_data_key_t * key);
	void APICALL (*hb_unicode_funcs_make_immutable)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs);
	hb_bool_t APICALL (*hb_unicode_funcs_is_immutable)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs);
	hb_unicode_funcs_t * APICALL (*hb_unicode_funcs_get_parent)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs);
	void APICALL (*hb_unicode_funcs_set_combining_class_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_combining_class_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_unicode_funcs_set_general_category_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_general_category_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_unicode_funcs_set_mirroring_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_mirroring_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_unicode_funcs_set_script_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_script_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_unicode_funcs_set_compose_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_compose_func_t func, void * user_data, hb_destroy_func_t destroy);
	void APICALL (*hb_unicode_funcs_set_decompose_func)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_unicode_decompose_func_t func, void * user_data, hb_destroy_func_t destroy);
	hb_unicode_combining_class_t APICALL (*hb_unicode_combining_class)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
	hb_unicode_general_category_t APICALL (*hb_unicode_general_category)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
	hb_codepoint_t APICALL (*hb_unicode_mirroring)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
	hb_script_t APICALL (*hb_unicode_script)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t unicode);
	hb_bool_t APICALL (*hb_unicode_compose)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t * ab);
	hb_bool_t APICALL (*hb_unicode_decompose)(struct HarfbuzzIFace *Self, hb_unicode_funcs_t * ufuncs, hb_codepoint_t ab, hb_codepoint_t * a, hb_codepoint_t * b);
	void APICALL (*hb_version)(struct HarfbuzzIFace *Self, unsigned int * major, unsigned int * minor, unsigned int * micro);
	const char * APICALL (*hb_version_string)(struct HarfbuzzIFace *Self);
	hb_bool_t APICALL (*hb_version_atleast)(struct HarfbuzzIFace *Self, unsigned int major, unsigned int minor, unsigned int micro);
};

#ifdef __cplusplus
}
#ifdef __USE_AMIGAOS_NAMESPACE__
}
#endif
#endif

#endif /* HARFBUZZ_INTERFACE_DEF_H */
